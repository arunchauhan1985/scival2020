//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3643
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Scival.XSD {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NewDataSet : global::System.Data.DataSet {
        
        private addressDataTable tableaddress;
        
        private awardDataTable tableaward;
        
        private revisionHistoryDataTable tablerevisionHistory;
        
        private revisedDateDataTable tablerevisedDate;
        
        private createdDateDataTable tablecreatedDate;
        
        private amountDataTable tableamount;
        
        private classificationGroupDataTable tableclassificationGroup;
        
        private classificationsDataTable tableclassifications;
        
        private classificationDataTable tableclassification;
        
        private keywordsDataTable tablekeywords;
        
        private keywordDataTable tablekeyword;
        
        private awardeesDataTable tableawardees;
        
        private awardeeDataTable tableawardee;
        
        private awardeeNameDataTable tableawardeeName;
        
        private awardeeInstitutionDataTable tableawardeeInstitution;
        
        private affiliationDataTable tableaffiliation;
        
        private telephoneDataTable tabletelephone;
        
        private faxDataTable tablefax;
        
        private awardManagersDataTable tableawardManagers;
        
        private awardManagerDataTable tableawardManager;
        
        private contactNameDataTable tablecontactName;
        
        private websiteDataTable tablewebsite;
        
        private relatedProgramsDataTable tablerelatedPrograms;
        
        private relatedProgramDataTable tablerelatedProgram;
        
        private relatedFundingBodiesDataTable tablerelatedFundingBodies;
        
        private orgDataTable tableorg;
        
        private relatedItemsDataTable tablerelatedItems;
        
        private itemDataTable tableitem;
        
        private linkDataTable tablelink;
        
        private global::System.Data.DataRelation relationaffiliation_address;
        
        private global::System.Data.DataRelation relationawardManager_address;
        
        private global::System.Data.DataRelation relationaward_revisionHistory;
        
        private global::System.Data.DataRelation relationrevisionHistory_revisedDate;
        
        private global::System.Data.DataRelation relationrevisionHistory_createdDate;
        
        private global::System.Data.DataRelation relationaward_amount;
        
        private global::System.Data.DataRelation relationaward_classificationGroup;
        
        private global::System.Data.DataRelation relationclassificationGroup_classifications;
        
        private global::System.Data.DataRelation relationclassifications_classification;
        
        private global::System.Data.DataRelation relationaward_keywords;
        
        private global::System.Data.DataRelation relationkeywords_keyword;
        
        private global::System.Data.DataRelation relationaward_awardees;
        
        private global::System.Data.DataRelation relationawardees_awardee;
        
        private global::System.Data.DataRelation relationawardee_awardeeName;
        
        private global::System.Data.DataRelation relationawardee_awardeeInstitution;
        
        private global::System.Data.DataRelation relationawardeeInstitution_affiliation;
        
        private global::System.Data.DataRelation relationaffiliation_telephone;
        
        private global::System.Data.DataRelation relationaffiliation_fax;
        
        private global::System.Data.DataRelation relationaward_awardManagers;
        
        private global::System.Data.DataRelation relationawardManagers_awardManager;
        
        private global::System.Data.DataRelation relationawardManager_contactName;
        
        private global::System.Data.DataRelation relationawardManager_website;
        
        private global::System.Data.DataRelation relationaward_relatedPrograms;
        
        private global::System.Data.DataRelation relationrelatedPrograms_relatedProgram;
        
        private global::System.Data.DataRelation relationaward_relatedFundingBodies;
        
        private global::System.Data.DataRelation relationrelatedFundingBodies_org;
        
        private global::System.Data.DataRelation relationaward_relatedItems;
        
        private global::System.Data.DataRelation relationrelatedItems_item;
        
        private global::System.Data.DataRelation relationitem_link;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["address"] != null)) {
                    base.Tables.Add(new addressDataTable(ds.Tables["address"]));
                }
                if ((ds.Tables["award"] != null)) {
                    base.Tables.Add(new awardDataTable(ds.Tables["award"]));
                }
                if ((ds.Tables["revisionHistory"] != null)) {
                    base.Tables.Add(new revisionHistoryDataTable(ds.Tables["revisionHistory"]));
                }
                if ((ds.Tables["revisedDate"] != null)) {
                    base.Tables.Add(new revisedDateDataTable(ds.Tables["revisedDate"]));
                }
                if ((ds.Tables["createdDate"] != null)) {
                    base.Tables.Add(new createdDateDataTable(ds.Tables["createdDate"]));
                }
                if ((ds.Tables["amount"] != null)) {
                    base.Tables.Add(new amountDataTable(ds.Tables["amount"]));
                }
                if ((ds.Tables["classificationGroup"] != null)) {
                    base.Tables.Add(new classificationGroupDataTable(ds.Tables["classificationGroup"]));
                }
                if ((ds.Tables["classifications"] != null)) {
                    base.Tables.Add(new classificationsDataTable(ds.Tables["classifications"]));
                }
                if ((ds.Tables["classification"] != null)) {
                    base.Tables.Add(new classificationDataTable(ds.Tables["classification"]));
                }
                if ((ds.Tables["keywords"] != null)) {
                    base.Tables.Add(new keywordsDataTable(ds.Tables["keywords"]));
                }
                if ((ds.Tables["keyword"] != null)) {
                    base.Tables.Add(new keywordDataTable(ds.Tables["keyword"]));
                }
                if ((ds.Tables["awardees"] != null)) {
                    base.Tables.Add(new awardeesDataTable(ds.Tables["awardees"]));
                }
                if ((ds.Tables["awardee"] != null)) {
                    base.Tables.Add(new awardeeDataTable(ds.Tables["awardee"]));
                }
                if ((ds.Tables["awardeeName"] != null)) {
                    base.Tables.Add(new awardeeNameDataTable(ds.Tables["awardeeName"]));
                }
                if ((ds.Tables["awardeeInstitution"] != null)) {
                    base.Tables.Add(new awardeeInstitutionDataTable(ds.Tables["awardeeInstitution"]));
                }
                if ((ds.Tables["affiliation"] != null)) {
                    base.Tables.Add(new affiliationDataTable(ds.Tables["affiliation"]));
                }
                if ((ds.Tables["telephone"] != null)) {
                    base.Tables.Add(new telephoneDataTable(ds.Tables["telephone"]));
                }
                if ((ds.Tables["fax"] != null)) {
                    base.Tables.Add(new faxDataTable(ds.Tables["fax"]));
                }
                if ((ds.Tables["awardManagers"] != null)) {
                    base.Tables.Add(new awardManagersDataTable(ds.Tables["awardManagers"]));
                }
                if ((ds.Tables["awardManager"] != null)) {
                    base.Tables.Add(new awardManagerDataTable(ds.Tables["awardManager"]));
                }
                if ((ds.Tables["contactName"] != null)) {
                    base.Tables.Add(new contactNameDataTable(ds.Tables["contactName"]));
                }
                if ((ds.Tables["website"] != null)) {
                    base.Tables.Add(new websiteDataTable(ds.Tables["website"]));
                }
                if ((ds.Tables["relatedPrograms"] != null)) {
                    base.Tables.Add(new relatedProgramsDataTable(ds.Tables["relatedPrograms"]));
                }
                if ((ds.Tables["relatedProgram"] != null)) {
                    base.Tables.Add(new relatedProgramDataTable(ds.Tables["relatedProgram"]));
                }
                if ((ds.Tables["relatedFundingBodies"] != null)) {
                    base.Tables.Add(new relatedFundingBodiesDataTable(ds.Tables["relatedFundingBodies"]));
                }
                if ((ds.Tables["org"] != null)) {
                    base.Tables.Add(new orgDataTable(ds.Tables["org"]));
                }
                if ((ds.Tables["relatedItems"] != null)) {
                    base.Tables.Add(new relatedItemsDataTable(ds.Tables["relatedItems"]));
                }
                if ((ds.Tables["item"] != null)) {
                    base.Tables.Add(new itemDataTable(ds.Tables["item"]));
                }
                if ((ds.Tables["link"] != null)) {
                    base.Tables.Add(new linkDataTable(ds.Tables["link"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public addressDataTable address {
            get {
                return this.tableaddress;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public awardDataTable award {
            get {
                return this.tableaward;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public revisionHistoryDataTable revisionHistory {
            get {
                return this.tablerevisionHistory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public revisedDateDataTable revisedDate {
            get {
                return this.tablerevisedDate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public createdDateDataTable createdDate {
            get {
                return this.tablecreatedDate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public amountDataTable amount {
            get {
                return this.tableamount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public classificationGroupDataTable classificationGroup {
            get {
                return this.tableclassificationGroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public classificationsDataTable classifications {
            get {
                return this.tableclassifications;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public classificationDataTable classification {
            get {
                return this.tableclassification;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public keywordsDataTable keywords {
            get {
                return this.tablekeywords;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public keywordDataTable keyword {
            get {
                return this.tablekeyword;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public awardeesDataTable awardees {
            get {
                return this.tableawardees;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public awardeeDataTable awardee {
            get {
                return this.tableawardee;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public awardeeNameDataTable awardeeName {
            get {
                return this.tableawardeeName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public awardeeInstitutionDataTable awardeeInstitution {
            get {
                return this.tableawardeeInstitution;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public affiliationDataTable affiliation {
            get {
                return this.tableaffiliation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public telephoneDataTable telephone {
            get {
                return this.tabletelephone;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public faxDataTable fax {
            get {
                return this.tablefax;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public awardManagersDataTable awardManagers {
            get {
                return this.tableawardManagers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public awardManagerDataTable awardManager {
            get {
                return this.tableawardManager;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public contactNameDataTable contactName {
            get {
                return this.tablecontactName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public websiteDataTable website {
            get {
                return this.tablewebsite;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public relatedProgramsDataTable relatedPrograms {
            get {
                return this.tablerelatedPrograms;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public relatedProgramDataTable relatedProgram {
            get {
                return this.tablerelatedProgram;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public relatedFundingBodiesDataTable relatedFundingBodies {
            get {
                return this.tablerelatedFundingBodies;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public orgDataTable org {
            get {
                return this.tableorg;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public relatedItemsDataTable relatedItems {
            get {
                return this.tablerelatedItems;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public itemDataTable item {
            get {
                return this.tableitem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public linkDataTable link {
            get {
                return this.tablelink;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["address"] != null)) {
                    base.Tables.Add(new addressDataTable(ds.Tables["address"]));
                }
                if ((ds.Tables["award"] != null)) {
                    base.Tables.Add(new awardDataTable(ds.Tables["award"]));
                }
                if ((ds.Tables["revisionHistory"] != null)) {
                    base.Tables.Add(new revisionHistoryDataTable(ds.Tables["revisionHistory"]));
                }
                if ((ds.Tables["revisedDate"] != null)) {
                    base.Tables.Add(new revisedDateDataTable(ds.Tables["revisedDate"]));
                }
                if ((ds.Tables["createdDate"] != null)) {
                    base.Tables.Add(new createdDateDataTable(ds.Tables["createdDate"]));
                }
                if ((ds.Tables["amount"] != null)) {
                    base.Tables.Add(new amountDataTable(ds.Tables["amount"]));
                }
                if ((ds.Tables["classificationGroup"] != null)) {
                    base.Tables.Add(new classificationGroupDataTable(ds.Tables["classificationGroup"]));
                }
                if ((ds.Tables["classifications"] != null)) {
                    base.Tables.Add(new classificationsDataTable(ds.Tables["classifications"]));
                }
                if ((ds.Tables["classification"] != null)) {
                    base.Tables.Add(new classificationDataTable(ds.Tables["classification"]));
                }
                if ((ds.Tables["keywords"] != null)) {
                    base.Tables.Add(new keywordsDataTable(ds.Tables["keywords"]));
                }
                if ((ds.Tables["keyword"] != null)) {
                    base.Tables.Add(new keywordDataTable(ds.Tables["keyword"]));
                }
                if ((ds.Tables["awardees"] != null)) {
                    base.Tables.Add(new awardeesDataTable(ds.Tables["awardees"]));
                }
                if ((ds.Tables["awardee"] != null)) {
                    base.Tables.Add(new awardeeDataTable(ds.Tables["awardee"]));
                }
                if ((ds.Tables["awardeeName"] != null)) {
                    base.Tables.Add(new awardeeNameDataTable(ds.Tables["awardeeName"]));
                }
                if ((ds.Tables["awardeeInstitution"] != null)) {
                    base.Tables.Add(new awardeeInstitutionDataTable(ds.Tables["awardeeInstitution"]));
                }
                if ((ds.Tables["affiliation"] != null)) {
                    base.Tables.Add(new affiliationDataTable(ds.Tables["affiliation"]));
                }
                if ((ds.Tables["telephone"] != null)) {
                    base.Tables.Add(new telephoneDataTable(ds.Tables["telephone"]));
                }
                if ((ds.Tables["fax"] != null)) {
                    base.Tables.Add(new faxDataTable(ds.Tables["fax"]));
                }
                if ((ds.Tables["awardManagers"] != null)) {
                    base.Tables.Add(new awardManagersDataTable(ds.Tables["awardManagers"]));
                }
                if ((ds.Tables["awardManager"] != null)) {
                    base.Tables.Add(new awardManagerDataTable(ds.Tables["awardManager"]));
                }
                if ((ds.Tables["contactName"] != null)) {
                    base.Tables.Add(new contactNameDataTable(ds.Tables["contactName"]));
                }
                if ((ds.Tables["website"] != null)) {
                    base.Tables.Add(new websiteDataTable(ds.Tables["website"]));
                }
                if ((ds.Tables["relatedPrograms"] != null)) {
                    base.Tables.Add(new relatedProgramsDataTable(ds.Tables["relatedPrograms"]));
                }
                if ((ds.Tables["relatedProgram"] != null)) {
                    base.Tables.Add(new relatedProgramDataTable(ds.Tables["relatedProgram"]));
                }
                if ((ds.Tables["relatedFundingBodies"] != null)) {
                    base.Tables.Add(new relatedFundingBodiesDataTable(ds.Tables["relatedFundingBodies"]));
                }
                if ((ds.Tables["org"] != null)) {
                    base.Tables.Add(new orgDataTable(ds.Tables["org"]));
                }
                if ((ds.Tables["relatedItems"] != null)) {
                    base.Tables.Add(new relatedItemsDataTable(ds.Tables["relatedItems"]));
                }
                if ((ds.Tables["item"] != null)) {
                    base.Tables.Add(new itemDataTable(ds.Tables["item"]));
                }
                if ((ds.Tables["link"] != null)) {
                    base.Tables.Add(new linkDataTable(ds.Tables["link"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableaddress = ((addressDataTable)(base.Tables["address"]));
            if ((initTable == true)) {
                if ((this.tableaddress != null)) {
                    this.tableaddress.InitVars();
                }
            }
            this.tableaward = ((awardDataTable)(base.Tables["award"]));
            if ((initTable == true)) {
                if ((this.tableaward != null)) {
                    this.tableaward.InitVars();
                }
            }
            this.tablerevisionHistory = ((revisionHistoryDataTable)(base.Tables["revisionHistory"]));
            if ((initTable == true)) {
                if ((this.tablerevisionHistory != null)) {
                    this.tablerevisionHistory.InitVars();
                }
            }
            this.tablerevisedDate = ((revisedDateDataTable)(base.Tables["revisedDate"]));
            if ((initTable == true)) {
                if ((this.tablerevisedDate != null)) {
                    this.tablerevisedDate.InitVars();
                }
            }
            this.tablecreatedDate = ((createdDateDataTable)(base.Tables["createdDate"]));
            if ((initTable == true)) {
                if ((this.tablecreatedDate != null)) {
                    this.tablecreatedDate.InitVars();
                }
            }
            this.tableamount = ((amountDataTable)(base.Tables["amount"]));
            if ((initTable == true)) {
                if ((this.tableamount != null)) {
                    this.tableamount.InitVars();
                }
            }
            this.tableclassificationGroup = ((classificationGroupDataTable)(base.Tables["classificationGroup"]));
            if ((initTable == true)) {
                if ((this.tableclassificationGroup != null)) {
                    this.tableclassificationGroup.InitVars();
                }
            }
            this.tableclassifications = ((classificationsDataTable)(base.Tables["classifications"]));
            if ((initTable == true)) {
                if ((this.tableclassifications != null)) {
                    this.tableclassifications.InitVars();
                }
            }
            this.tableclassification = ((classificationDataTable)(base.Tables["classification"]));
            if ((initTable == true)) {
                if ((this.tableclassification != null)) {
                    this.tableclassification.InitVars();
                }
            }
            this.tablekeywords = ((keywordsDataTable)(base.Tables["keywords"]));
            if ((initTable == true)) {
                if ((this.tablekeywords != null)) {
                    this.tablekeywords.InitVars();
                }
            }
            this.tablekeyword = ((keywordDataTable)(base.Tables["keyword"]));
            if ((initTable == true)) {
                if ((this.tablekeyword != null)) {
                    this.tablekeyword.InitVars();
                }
            }
            this.tableawardees = ((awardeesDataTable)(base.Tables["awardees"]));
            if ((initTable == true)) {
                if ((this.tableawardees != null)) {
                    this.tableawardees.InitVars();
                }
            }
            this.tableawardee = ((awardeeDataTable)(base.Tables["awardee"]));
            if ((initTable == true)) {
                if ((this.tableawardee != null)) {
                    this.tableawardee.InitVars();
                }
            }
            this.tableawardeeName = ((awardeeNameDataTable)(base.Tables["awardeeName"]));
            if ((initTable == true)) {
                if ((this.tableawardeeName != null)) {
                    this.tableawardeeName.InitVars();
                }
            }
            this.tableawardeeInstitution = ((awardeeInstitutionDataTable)(base.Tables["awardeeInstitution"]));
            if ((initTable == true)) {
                if ((this.tableawardeeInstitution != null)) {
                    this.tableawardeeInstitution.InitVars();
                }
            }
            this.tableaffiliation = ((affiliationDataTable)(base.Tables["affiliation"]));
            if ((initTable == true)) {
                if ((this.tableaffiliation != null)) {
                    this.tableaffiliation.InitVars();
                }
            }
            this.tabletelephone = ((telephoneDataTable)(base.Tables["telephone"]));
            if ((initTable == true)) {
                if ((this.tabletelephone != null)) {
                    this.tabletelephone.InitVars();
                }
            }
            this.tablefax = ((faxDataTable)(base.Tables["fax"]));
            if ((initTable == true)) {
                if ((this.tablefax != null)) {
                    this.tablefax.InitVars();
                }
            }
            this.tableawardManagers = ((awardManagersDataTable)(base.Tables["awardManagers"]));
            if ((initTable == true)) {
                if ((this.tableawardManagers != null)) {
                    this.tableawardManagers.InitVars();
                }
            }
            this.tableawardManager = ((awardManagerDataTable)(base.Tables["awardManager"]));
            if ((initTable == true)) {
                if ((this.tableawardManager != null)) {
                    this.tableawardManager.InitVars();
                }
            }
            this.tablecontactName = ((contactNameDataTable)(base.Tables["contactName"]));
            if ((initTable == true)) {
                if ((this.tablecontactName != null)) {
                    this.tablecontactName.InitVars();
                }
            }
            this.tablewebsite = ((websiteDataTable)(base.Tables["website"]));
            if ((initTable == true)) {
                if ((this.tablewebsite != null)) {
                    this.tablewebsite.InitVars();
                }
            }
            this.tablerelatedPrograms = ((relatedProgramsDataTable)(base.Tables["relatedPrograms"]));
            if ((initTable == true)) {
                if ((this.tablerelatedPrograms != null)) {
                    this.tablerelatedPrograms.InitVars();
                }
            }
            this.tablerelatedProgram = ((relatedProgramDataTable)(base.Tables["relatedProgram"]));
            if ((initTable == true)) {
                if ((this.tablerelatedProgram != null)) {
                    this.tablerelatedProgram.InitVars();
                }
            }
            this.tablerelatedFundingBodies = ((relatedFundingBodiesDataTable)(base.Tables["relatedFundingBodies"]));
            if ((initTable == true)) {
                if ((this.tablerelatedFundingBodies != null)) {
                    this.tablerelatedFundingBodies.InitVars();
                }
            }
            this.tableorg = ((orgDataTable)(base.Tables["org"]));
            if ((initTable == true)) {
                if ((this.tableorg != null)) {
                    this.tableorg.InitVars();
                }
            }
            this.tablerelatedItems = ((relatedItemsDataTable)(base.Tables["relatedItems"]));
            if ((initTable == true)) {
                if ((this.tablerelatedItems != null)) {
                    this.tablerelatedItems.InitVars();
                }
            }
            this.tableitem = ((itemDataTable)(base.Tables["item"]));
            if ((initTable == true)) {
                if ((this.tableitem != null)) {
                    this.tableitem.InitVars();
                }
            }
            this.tablelink = ((linkDataTable)(base.Tables["link"]));
            if ((initTable == true)) {
                if ((this.tablelink != null)) {
                    this.tablelink.InitVars();
                }
            }
            this.relationaffiliation_address = this.Relations["affiliation_address"];
            this.relationawardManager_address = this.Relations["awardManager_address"];
            this.relationaward_revisionHistory = this.Relations["award_revisionHistory"];
            this.relationrevisionHistory_revisedDate = this.Relations["revisionHistory_revisedDate"];
            this.relationrevisionHistory_createdDate = this.Relations["revisionHistory_createdDate"];
            this.relationaward_amount = this.Relations["award_amount"];
            this.relationaward_classificationGroup = this.Relations["award_classificationGroup"];
            this.relationclassificationGroup_classifications = this.Relations["classificationGroup_classifications"];
            this.relationclassifications_classification = this.Relations["classifications_classification"];
            this.relationaward_keywords = this.Relations["award_keywords"];
            this.relationkeywords_keyword = this.Relations["keywords_keyword"];
            this.relationaward_awardees = this.Relations["award_awardees"];
            this.relationawardees_awardee = this.Relations["awardees_awardee"];
            this.relationawardee_awardeeName = this.Relations["awardee_awardeeName"];
            this.relationawardee_awardeeInstitution = this.Relations["awardee_awardeeInstitution"];
            this.relationawardeeInstitution_affiliation = this.Relations["awardeeInstitution_affiliation"];
            this.relationaffiliation_telephone = this.Relations["affiliation_telephone"];
            this.relationaffiliation_fax = this.Relations["affiliation_fax"];
            this.relationaward_awardManagers = this.Relations["award_awardManagers"];
            this.relationawardManagers_awardManager = this.Relations["awardManagers_awardManager"];
            this.relationawardManager_contactName = this.Relations["awardManager_contactName"];
            this.relationawardManager_website = this.Relations["awardManager_website"];
            this.relationaward_relatedPrograms = this.Relations["award_relatedPrograms"];
            this.relationrelatedPrograms_relatedProgram = this.Relations["relatedPrograms_relatedProgram"];
            this.relationaward_relatedFundingBodies = this.Relations["award_relatedFundingBodies"];
            this.relationrelatedFundingBodies_org = this.Relations["relatedFundingBodies_org"];
            this.relationaward_relatedItems = this.Relations["award_relatedItems"];
            this.relationrelatedItems_item = this.Relations["relatedItems_item"];
            this.relationitem_link = this.Relations["item_link"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.elsevier.com/xml/schema/grant/grant-1.2";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableaddress = new addressDataTable();
            base.Tables.Add(this.tableaddress);
            this.tableaward = new awardDataTable();
            base.Tables.Add(this.tableaward);
            this.tablerevisionHistory = new revisionHistoryDataTable();
            base.Tables.Add(this.tablerevisionHistory);
            this.tablerevisedDate = new revisedDateDataTable();
            base.Tables.Add(this.tablerevisedDate);
            this.tablecreatedDate = new createdDateDataTable();
            base.Tables.Add(this.tablecreatedDate);
            this.tableamount = new amountDataTable();
            base.Tables.Add(this.tableamount);
            this.tableclassificationGroup = new classificationGroupDataTable();
            base.Tables.Add(this.tableclassificationGroup);
            this.tableclassifications = new classificationsDataTable();
            base.Tables.Add(this.tableclassifications);
            this.tableclassification = new classificationDataTable();
            base.Tables.Add(this.tableclassification);
            this.tablekeywords = new keywordsDataTable();
            base.Tables.Add(this.tablekeywords);
            this.tablekeyword = new keywordDataTable();
            base.Tables.Add(this.tablekeyword);
            this.tableawardees = new awardeesDataTable();
            base.Tables.Add(this.tableawardees);
            this.tableawardee = new awardeeDataTable();
            base.Tables.Add(this.tableawardee);
            this.tableawardeeName = new awardeeNameDataTable();
            base.Tables.Add(this.tableawardeeName);
            this.tableawardeeInstitution = new awardeeInstitutionDataTable();
            base.Tables.Add(this.tableawardeeInstitution);
            this.tableaffiliation = new affiliationDataTable();
            base.Tables.Add(this.tableaffiliation);
            this.tabletelephone = new telephoneDataTable();
            base.Tables.Add(this.tabletelephone);
            this.tablefax = new faxDataTable();
            base.Tables.Add(this.tablefax);
            this.tableawardManagers = new awardManagersDataTable();
            base.Tables.Add(this.tableawardManagers);
            this.tableawardManager = new awardManagerDataTable();
            base.Tables.Add(this.tableawardManager);
            this.tablecontactName = new contactNameDataTable();
            base.Tables.Add(this.tablecontactName);
            this.tablewebsite = new websiteDataTable();
            base.Tables.Add(this.tablewebsite);
            this.tablerelatedPrograms = new relatedProgramsDataTable();
            base.Tables.Add(this.tablerelatedPrograms);
            this.tablerelatedProgram = new relatedProgramDataTable();
            base.Tables.Add(this.tablerelatedProgram);
            this.tablerelatedFundingBodies = new relatedFundingBodiesDataTable();
            base.Tables.Add(this.tablerelatedFundingBodies);
            this.tableorg = new orgDataTable();
            base.Tables.Add(this.tableorg);
            this.tablerelatedItems = new relatedItemsDataTable();
            base.Tables.Add(this.tablerelatedItems);
            this.tableitem = new itemDataTable();
            base.Tables.Add(this.tableitem);
            this.tablelink = new linkDataTable();
            base.Tables.Add(this.tablelink);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("affiliation_address", new global::System.Data.DataColumn[] {
                        this.tableaffiliation.affiliation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableaddress.affiliation_IdColumn});
            this.tableaddress.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("awardManager_address", new global::System.Data.DataColumn[] {
                        this.tableawardManager.awardManager_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableaddress.awardManager_IdColumn});
            this.tableaddress.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("award_revisionHistory", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerevisionHistory.award_IdColumn});
            this.tablerevisionHistory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("revisionHistory_revisedDate", new global::System.Data.DataColumn[] {
                        this.tablerevisionHistory.revisionHistory_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerevisedDate.revisionHistory_IdColumn});
            this.tablerevisedDate.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("revisionHistory_createdDate", new global::System.Data.DataColumn[] {
                        this.tablerevisionHistory.revisionHistory_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecreatedDate.revisionHistory_IdColumn});
            this.tablecreatedDate.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("award_amount", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableamount.award_IdColumn});
            this.tableamount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("award_classificationGroup", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableclassificationGroup.award_IdColumn});
            this.tableclassificationGroup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("classificationGroup_classifications", new global::System.Data.DataColumn[] {
                        this.tableclassificationGroup.classificationGroup_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableclassifications.classificationGroup_IdColumn});
            this.tableclassifications.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("classifications_classification", new global::System.Data.DataColumn[] {
                        this.tableclassifications.classifications_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableclassification.classifications_IdColumn});
            this.tableclassification.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("award_keywords", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablekeywords.award_IdColumn});
            this.tablekeywords.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("keywords_keyword", new global::System.Data.DataColumn[] {
                        this.tablekeywords.keywords_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablekeyword.keywords_IdColumn});
            this.tablekeyword.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("award_awardees", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableawardees.award_IdColumn});
            this.tableawardees.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("awardees_awardee", new global::System.Data.DataColumn[] {
                        this.tableawardees.awardees_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableawardee.awardees_IdColumn});
            this.tableawardee.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("awardee_awardeeName", new global::System.Data.DataColumn[] {
                        this.tableawardee.awardee_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableawardeeName.awardee_IdColumn});
            this.tableawardeeName.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("awardee_awardeeInstitution", new global::System.Data.DataColumn[] {
                        this.tableawardee.awardee_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableawardeeInstitution.awardee_IdColumn});
            this.tableawardeeInstitution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("awardeeInstitution_affiliation", new global::System.Data.DataColumn[] {
                        this.tableawardeeInstitution.awardeeInstitution_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableaffiliation.awardeeInstitution_IdColumn});
            this.tableaffiliation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("affiliation_telephone", new global::System.Data.DataColumn[] {
                        this.tableaffiliation.affiliation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletelephone.affiliation_IdColumn});
            this.tabletelephone.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("affiliation_fax", new global::System.Data.DataColumn[] {
                        this.tableaffiliation.affiliation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefax.affiliation_IdColumn});
            this.tablefax.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("award_awardManagers", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableawardManagers.award_IdColumn});
            this.tableawardManagers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("awardManagers_awardManager", new global::System.Data.DataColumn[] {
                        this.tableawardManagers.awardManagers_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableawardManager.awardManagers_IdColumn});
            this.tableawardManager.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("awardManager_contactName", new global::System.Data.DataColumn[] {
                        this.tableawardManager.awardManager_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecontactName.awardManager_IdColumn});
            this.tablecontactName.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("awardManager_website", new global::System.Data.DataColumn[] {
                        this.tableawardManager.awardManager_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablewebsite.awardManager_IdColumn});
            this.tablewebsite.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("award_relatedPrograms", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerelatedPrograms.award_IdColumn});
            this.tablerelatedPrograms.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("relatedPrograms_relatedProgram", new global::System.Data.DataColumn[] {
                        this.tablerelatedPrograms.relatedPrograms_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerelatedProgram.relatedPrograms_IdColumn});
            this.tablerelatedProgram.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("award_relatedFundingBodies", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerelatedFundingBodies.award_IdColumn});
            this.tablerelatedFundingBodies.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("relatedFundingBodies_org", new global::System.Data.DataColumn[] {
                        this.tablerelatedFundingBodies.relatedFundingBodies_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableorg.relatedFundingBodies_IdColumn});
            this.tableorg.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("award_relatedItems", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerelatedItems.award_IdColumn});
            this.tablerelatedItems.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("relatedItems_item", new global::System.Data.DataColumn[] {
                        this.tablerelatedItems.relatedItems_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableitem.relatedItems_IdColumn});
            this.tableitem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("item_link", new global::System.Data.DataColumn[] {
                        this.tableitem.item_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablelink.item_IdColumn});
            this.tablelink.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationaffiliation_address = new global::System.Data.DataRelation("affiliation_address", new global::System.Data.DataColumn[] {
                        this.tableaffiliation.affiliation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableaddress.affiliation_IdColumn}, false);
            this.relationaffiliation_address.Nested = true;
            this.Relations.Add(this.relationaffiliation_address);
            this.relationawardManager_address = new global::System.Data.DataRelation("awardManager_address", new global::System.Data.DataColumn[] {
                        this.tableawardManager.awardManager_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableaddress.awardManager_IdColumn}, false);
            this.relationawardManager_address.Nested = true;
            this.Relations.Add(this.relationawardManager_address);
            this.relationaward_revisionHistory = new global::System.Data.DataRelation("award_revisionHistory", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerevisionHistory.award_IdColumn}, false);
            this.relationaward_revisionHistory.Nested = true;
            this.Relations.Add(this.relationaward_revisionHistory);
            this.relationrevisionHistory_revisedDate = new global::System.Data.DataRelation("revisionHistory_revisedDate", new global::System.Data.DataColumn[] {
                        this.tablerevisionHistory.revisionHistory_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerevisedDate.revisionHistory_IdColumn}, false);
            this.relationrevisionHistory_revisedDate.Nested = true;
            this.Relations.Add(this.relationrevisionHistory_revisedDate);
            this.relationrevisionHistory_createdDate = new global::System.Data.DataRelation("revisionHistory_createdDate", new global::System.Data.DataColumn[] {
                        this.tablerevisionHistory.revisionHistory_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecreatedDate.revisionHistory_IdColumn}, false);
            this.relationrevisionHistory_createdDate.Nested = true;
            this.Relations.Add(this.relationrevisionHistory_createdDate);
            this.relationaward_amount = new global::System.Data.DataRelation("award_amount", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableamount.award_IdColumn}, false);
            this.relationaward_amount.Nested = true;
            this.Relations.Add(this.relationaward_amount);
            this.relationaward_classificationGroup = new global::System.Data.DataRelation("award_classificationGroup", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableclassificationGroup.award_IdColumn}, false);
            this.relationaward_classificationGroup.Nested = true;
            this.Relations.Add(this.relationaward_classificationGroup);
            this.relationclassificationGroup_classifications = new global::System.Data.DataRelation("classificationGroup_classifications", new global::System.Data.DataColumn[] {
                        this.tableclassificationGroup.classificationGroup_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableclassifications.classificationGroup_IdColumn}, false);
            this.relationclassificationGroup_classifications.Nested = true;
            this.Relations.Add(this.relationclassificationGroup_classifications);
            this.relationclassifications_classification = new global::System.Data.DataRelation("classifications_classification", new global::System.Data.DataColumn[] {
                        this.tableclassifications.classifications_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableclassification.classifications_IdColumn}, false);
            this.relationclassifications_classification.Nested = true;
            this.Relations.Add(this.relationclassifications_classification);
            this.relationaward_keywords = new global::System.Data.DataRelation("award_keywords", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablekeywords.award_IdColumn}, false);
            this.relationaward_keywords.Nested = true;
            this.Relations.Add(this.relationaward_keywords);
            this.relationkeywords_keyword = new global::System.Data.DataRelation("keywords_keyword", new global::System.Data.DataColumn[] {
                        this.tablekeywords.keywords_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablekeyword.keywords_IdColumn}, false);
            this.relationkeywords_keyword.Nested = true;
            this.Relations.Add(this.relationkeywords_keyword);
            this.relationaward_awardees = new global::System.Data.DataRelation("award_awardees", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableawardees.award_IdColumn}, false);
            this.relationaward_awardees.Nested = true;
            this.Relations.Add(this.relationaward_awardees);
            this.relationawardees_awardee = new global::System.Data.DataRelation("awardees_awardee", new global::System.Data.DataColumn[] {
                        this.tableawardees.awardees_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableawardee.awardees_IdColumn}, false);
            this.relationawardees_awardee.Nested = true;
            this.Relations.Add(this.relationawardees_awardee);
            this.relationawardee_awardeeName = new global::System.Data.DataRelation("awardee_awardeeName", new global::System.Data.DataColumn[] {
                        this.tableawardee.awardee_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableawardeeName.awardee_IdColumn}, false);
            this.relationawardee_awardeeName.Nested = true;
            this.Relations.Add(this.relationawardee_awardeeName);
            this.relationawardee_awardeeInstitution = new global::System.Data.DataRelation("awardee_awardeeInstitution", new global::System.Data.DataColumn[] {
                        this.tableawardee.awardee_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableawardeeInstitution.awardee_IdColumn}, false);
            this.relationawardee_awardeeInstitution.Nested = true;
            this.Relations.Add(this.relationawardee_awardeeInstitution);
            this.relationawardeeInstitution_affiliation = new global::System.Data.DataRelation("awardeeInstitution_affiliation", new global::System.Data.DataColumn[] {
                        this.tableawardeeInstitution.awardeeInstitution_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableaffiliation.awardeeInstitution_IdColumn}, false);
            this.relationawardeeInstitution_affiliation.Nested = true;
            this.Relations.Add(this.relationawardeeInstitution_affiliation);
            this.relationaffiliation_telephone = new global::System.Data.DataRelation("affiliation_telephone", new global::System.Data.DataColumn[] {
                        this.tableaffiliation.affiliation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletelephone.affiliation_IdColumn}, false);
            this.relationaffiliation_telephone.Nested = true;
            this.Relations.Add(this.relationaffiliation_telephone);
            this.relationaffiliation_fax = new global::System.Data.DataRelation("affiliation_fax", new global::System.Data.DataColumn[] {
                        this.tableaffiliation.affiliation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefax.affiliation_IdColumn}, false);
            this.relationaffiliation_fax.Nested = true;
            this.Relations.Add(this.relationaffiliation_fax);
            this.relationaward_awardManagers = new global::System.Data.DataRelation("award_awardManagers", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableawardManagers.award_IdColumn}, false);
            this.relationaward_awardManagers.Nested = true;
            this.Relations.Add(this.relationaward_awardManagers);
            this.relationawardManagers_awardManager = new global::System.Data.DataRelation("awardManagers_awardManager", new global::System.Data.DataColumn[] {
                        this.tableawardManagers.awardManagers_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableawardManager.awardManagers_IdColumn}, false);
            this.relationawardManagers_awardManager.Nested = true;
            this.Relations.Add(this.relationawardManagers_awardManager);
            this.relationawardManager_contactName = new global::System.Data.DataRelation("awardManager_contactName", new global::System.Data.DataColumn[] {
                        this.tableawardManager.awardManager_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecontactName.awardManager_IdColumn}, false);
            this.relationawardManager_contactName.Nested = true;
            this.Relations.Add(this.relationawardManager_contactName);
            this.relationawardManager_website = new global::System.Data.DataRelation("awardManager_website", new global::System.Data.DataColumn[] {
                        this.tableawardManager.awardManager_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablewebsite.awardManager_IdColumn}, false);
            this.relationawardManager_website.Nested = true;
            this.Relations.Add(this.relationawardManager_website);
            this.relationaward_relatedPrograms = new global::System.Data.DataRelation("award_relatedPrograms", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerelatedPrograms.award_IdColumn}, false);
            this.relationaward_relatedPrograms.Nested = true;
            this.Relations.Add(this.relationaward_relatedPrograms);
            this.relationrelatedPrograms_relatedProgram = new global::System.Data.DataRelation("relatedPrograms_relatedProgram", new global::System.Data.DataColumn[] {
                        this.tablerelatedPrograms.relatedPrograms_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerelatedProgram.relatedPrograms_IdColumn}, false);
            this.relationrelatedPrograms_relatedProgram.Nested = true;
            this.Relations.Add(this.relationrelatedPrograms_relatedProgram);
            this.relationaward_relatedFundingBodies = new global::System.Data.DataRelation("award_relatedFundingBodies", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerelatedFundingBodies.award_IdColumn}, false);
            this.relationaward_relatedFundingBodies.Nested = true;
            this.Relations.Add(this.relationaward_relatedFundingBodies);
            this.relationrelatedFundingBodies_org = new global::System.Data.DataRelation("relatedFundingBodies_org", new global::System.Data.DataColumn[] {
                        this.tablerelatedFundingBodies.relatedFundingBodies_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableorg.relatedFundingBodies_IdColumn}, false);
            this.relationrelatedFundingBodies_org.Nested = true;
            this.Relations.Add(this.relationrelatedFundingBodies_org);
            this.relationaward_relatedItems = new global::System.Data.DataRelation("award_relatedItems", new global::System.Data.DataColumn[] {
                        this.tableaward.award_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerelatedItems.award_IdColumn}, false);
            this.relationaward_relatedItems.Nested = true;
            this.Relations.Add(this.relationaward_relatedItems);
            this.relationrelatedItems_item = new global::System.Data.DataRelation("relatedItems_item", new global::System.Data.DataColumn[] {
                        this.tablerelatedItems.relatedItems_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableitem.relatedItems_IdColumn}, false);
            this.relationrelatedItems_item.Nested = true;
            this.Relations.Add(this.relationrelatedItems_item);
            this.relationitem_link = new global::System.Data.DataRelation("item_link", new global::System.Data.DataColumn[] {
                        this.tableitem.item_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablelink.item_IdColumn}, false);
            this.relationitem_link.Nested = true;
            this.Relations.Add(this.relationitem_link);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeaddress() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeaward() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerevisionHistory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerevisedDate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecreatedDate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeamount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeclassificationGroup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeclassifications() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeclassification() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializekeywords() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializekeyword() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeawardees() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeawardee() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeawardeeName() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeawardeeInstitution() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeaffiliation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetelephone() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializefax() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeawardManagers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeawardManager() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecontactName() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializewebsite() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerelatedPrograms() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerelatedProgram() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerelatedFundingBodies() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeorg() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerelatedItems() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeitem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializelink() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void addressRowChangeEventHandler(object sender, addressRowChangeEvent e);
        
        public delegate void awardRowChangeEventHandler(object sender, awardRowChangeEvent e);
        
        public delegate void revisionHistoryRowChangeEventHandler(object sender, revisionHistoryRowChangeEvent e);
        
        public delegate void revisedDateRowChangeEventHandler(object sender, revisedDateRowChangeEvent e);
        
        public delegate void createdDateRowChangeEventHandler(object sender, createdDateRowChangeEvent e);
        
        public delegate void amountRowChangeEventHandler(object sender, amountRowChangeEvent e);
        
        public delegate void classificationGroupRowChangeEventHandler(object sender, classificationGroupRowChangeEvent e);
        
        public delegate void classificationsRowChangeEventHandler(object sender, classificationsRowChangeEvent e);
        
        public delegate void classificationRowChangeEventHandler(object sender, classificationRowChangeEvent e);
        
        public delegate void keywordsRowChangeEventHandler(object sender, keywordsRowChangeEvent e);
        
        public delegate void keywordRowChangeEventHandler(object sender, keywordRowChangeEvent e);
        
        public delegate void awardeesRowChangeEventHandler(object sender, awardeesRowChangeEvent e);
        
        public delegate void awardeeRowChangeEventHandler(object sender, awardeeRowChangeEvent e);
        
        public delegate void awardeeNameRowChangeEventHandler(object sender, awardeeNameRowChangeEvent e);
        
        public delegate void awardeeInstitutionRowChangeEventHandler(object sender, awardeeInstitutionRowChangeEvent e);
        
        public delegate void affiliationRowChangeEventHandler(object sender, affiliationRowChangeEvent e);
        
        public delegate void telephoneRowChangeEventHandler(object sender, telephoneRowChangeEvent e);
        
        public delegate void faxRowChangeEventHandler(object sender, faxRowChangeEvent e);
        
        public delegate void awardManagersRowChangeEventHandler(object sender, awardManagersRowChangeEvent e);
        
        public delegate void awardManagerRowChangeEventHandler(object sender, awardManagerRowChangeEvent e);
        
        public delegate void contactNameRowChangeEventHandler(object sender, contactNameRowChangeEvent e);
        
        public delegate void websiteRowChangeEventHandler(object sender, websiteRowChangeEvent e);
        
        public delegate void relatedProgramsRowChangeEventHandler(object sender, relatedProgramsRowChangeEvent e);
        
        public delegate void relatedProgramRowChangeEventHandler(object sender, relatedProgramRowChangeEvent e);
        
        public delegate void relatedFundingBodiesRowChangeEventHandler(object sender, relatedFundingBodiesRowChangeEvent e);
        
        public delegate void orgRowChangeEventHandler(object sender, orgRowChangeEvent e);
        
        public delegate void relatedItemsRowChangeEventHandler(object sender, relatedItemsRowChangeEvent e);
        
        public delegate void itemRowChangeEventHandler(object sender, itemRowChangeEvent e);
        
        public delegate void linkRowChangeEventHandler(object sender, linkRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class addressDataTable : global::System.Data.TypedTableBase<addressRow> {
            
            private global::System.Data.DataColumn columncountry;
            
            private global::System.Data.DataColumn columnaddress_text;
            
            private global::System.Data.DataColumn columnaffiliation_Id;
            
            private global::System.Data.DataColumn columnawardManager_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressDataTable() {
                this.TableName = "address";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal addressDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected addressDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countryColumn {
                get {
                    return this.columncountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn address_textColumn {
                get {
                    return this.columnaddress_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn affiliation_IdColumn {
                get {
                    return this.columnaffiliation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awardManager_IdColumn {
                get {
                    return this.columnawardManager_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressRow this[int index] {
                get {
                    return ((addressRow)(this.Rows[index]));
                }
            }
            
            public event addressRowChangeEventHandler addressRowChanging;
            
            public event addressRowChangeEventHandler addressRowChanged;
            
            public event addressRowChangeEventHandler addressRowDeleting;
            
            public event addressRowChangeEventHandler addressRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddaddressRow(addressRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressRow AddaddressRow(string country, string address_text, affiliationRow parentaffiliationRowByaffiliation_address, awardManagerRow parentawardManagerRowByawardManager_address) {
                addressRow rowaddressRow = ((addressRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        country,
                        address_text,
                        null,
                        null};
                if ((parentaffiliationRowByaffiliation_address != null)) {
                    columnValuesArray[2] = parentaffiliationRowByaffiliation_address[7];
                }
                if ((parentawardManagerRowByawardManager_address != null)) {
                    columnValuesArray[3] = parentawardManagerRowByawardManager_address[5];
                }
                rowaddressRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowaddressRow);
                return rowaddressRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                addressDataTable cln = ((addressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new addressDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncountry = base.Columns["country"];
                this.columnaddress_text = base.Columns["address_text"];
                this.columnaffiliation_Id = base.Columns["affiliation_Id"];
                this.columnawardManager_Id = base.Columns["awardManager_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncountry = new global::System.Data.DataColumn("country", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncountry);
                this.columnaddress_text = new global::System.Data.DataColumn("address_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnaddress_text);
                this.columnaffiliation_Id = new global::System.Data.DataColumn("affiliation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaffiliation_Id);
                this.columnawardManager_Id = new global::System.Data.DataColumn("awardManager_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawardManager_Id);
                this.columncountry.Namespace = "";
                this.columnaddress_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressRow NewaddressRow() {
                return ((addressRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new addressRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(addressRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.addressRowChanged != null)) {
                    this.addressRowChanged(this, new addressRowChangeEvent(((addressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.addressRowChanging != null)) {
                    this.addressRowChanging(this, new addressRowChangeEvent(((addressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.addressRowDeleted != null)) {
                    this.addressRowDeleted(this, new addressRowChangeEvent(((addressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.addressRowDeleting != null)) {
                    this.addressRowDeleting(this, new addressRowChangeEvent(((addressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveaddressRow(addressRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "addressDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class awardDataTable : global::System.Data.TypedTableBase<awardRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnfundingBodyAwardId;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columntrusting;
            
            private global::System.Data.DataColumn columncollectionCode;
            
            private global::System.Data.DataColumn columnhidden;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnstartDate;
            
            private global::System.Data.DataColumn columnlastAmendedDate;
            
            private global::System.Data.DataColumn columnendDate;
            
            private global::System.Data.DataColumn column_abstract;
            
            private global::System.Data.DataColumn columnawards_Id;
            
            private global::System.Data.DataColumn columnaward_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardDataTable() {
                this.TableName = "award";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected awardDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fundingBodyAwardIdColumn {
                get {
                    return this.columnfundingBodyAwardId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn trustingColumn {
                get {
                    return this.columntrusting;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn collectionCodeColumn {
                get {
                    return this.columncollectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hiddenColumn {
                get {
                    return this.columnhidden;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startDateColumn {
                get {
                    return this.columnstartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lastAmendedDateColumn {
                get {
                    return this.columnlastAmendedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn endDateColumn {
                get {
                    return this.columnendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _abstractColumn {
                get {
                    return this.column_abstract;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awards_IdColumn {
                get {
                    return this.columnawards_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn award_IdColumn {
                get {
                    return this.columnaward_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRow this[int index] {
                get {
                    return ((awardRow)(this.Rows[index]));
                }
            }
            
            public event awardRowChangeEventHandler awardRowChanging;
            
            public event awardRowChangeEventHandler awardRowChanged;
            
            public event awardRowChangeEventHandler awardRowDeleting;
            
            public event awardRowChangeEventHandler awardRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddawardRow(awardRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRow AddawardRow(long id, string fundingBodyAwardId, string type, bool trusting, string collectionCode, bool hidden, string name, System.DateTime startDate, System.DateTime lastAmendedDate, System.DateTime endDate, string _abstract, int awards_Id) {
                awardRow rowawardRow = ((awardRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        fundingBodyAwardId,
                        type,
                        trusting,
                        collectionCode,
                        hidden,
                        name,
                        startDate,
                        lastAmendedDate,
                        endDate,
                        _abstract,
                        awards_Id,
                        null};
                rowawardRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowawardRow);
                return rowawardRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                awardDataTable cln = ((awardDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new awardDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnfundingBodyAwardId = base.Columns["fundingBodyAwardId"];
                this.columntype = base.Columns["type"];
                this.columntrusting = base.Columns["trusting"];
                this.columncollectionCode = base.Columns["collectionCode"];
                this.columnhidden = base.Columns["hidden"];
                this.columnname = base.Columns["name"];
                this.columnstartDate = base.Columns["startDate"];
                this.columnlastAmendedDate = base.Columns["lastAmendedDate"];
                this.columnendDate = base.Columns["endDate"];
                this.column_abstract = base.Columns["abstract"];
                this.columnawards_Id = base.Columns["awards_Id"];
                this.columnaward_Id = base.Columns["award_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnfundingBodyAwardId = new global::System.Data.DataColumn("fundingBodyAwardId", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnfundingBodyAwardId);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columntrusting = new global::System.Data.DataColumn("trusting", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntrusting);
                this.columncollectionCode = new global::System.Data.DataColumn("collectionCode", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncollectionCode);
                this.columnhidden = new global::System.Data.DataColumn("hidden", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnhidden);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnstartDate = new global::System.Data.DataColumn("startDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartDate);
                this.columnlastAmendedDate = new global::System.Data.DataColumn("lastAmendedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlastAmendedDate);
                this.columnendDate = new global::System.Data.DataColumn("endDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnendDate);
                this.column_abstract = new global::System.Data.DataColumn("abstract", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column_abstract);
                this.columnawards_Id = new global::System.Data.DataColumn("awards_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawards_Id);
                this.columnaward_Id = new global::System.Data.DataColumn("award_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaward_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnaward_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnfundingBodyAwardId.AllowDBNull = false;
                this.columnfundingBodyAwardId.Namespace = "";
                this.columntype.AllowDBNull = false;
                this.columntype.Namespace = "";
                this.columntrusting.Namespace = "";
                this.columncollectionCode.Namespace = "";
                this.columnhidden.Namespace = "";
                this.columnhidden.DefaultValue = ((bool)(false));
                this.columnname.AllowDBNull = false;
                this.columnawards_Id.Namespace = "http://www.elsevier.com/xml/schema/grant/grant-1.2";
                this.columnaward_Id.AutoIncrement = true;
                this.columnaward_Id.AllowDBNull = false;
                this.columnaward_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRow NewawardRow() {
                return ((awardRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new awardRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(awardRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.awardRowChanged != null)) {
                    this.awardRowChanged(this, new awardRowChangeEvent(((awardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.awardRowChanging != null)) {
                    this.awardRowChanging(this, new awardRowChangeEvent(((awardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.awardRowDeleted != null)) {
                    this.awardRowDeleted(this, new awardRowChangeEvent(((awardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.awardRowDeleting != null)) {
                    this.awardRowDeleting(this, new awardRowChangeEvent(((awardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveawardRow(awardRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "awardDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class revisionHistoryDataTable : global::System.Data.TypedTableBase<revisionHistoryRow> {
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columnrevisionHistory_Id;
            
            private global::System.Data.DataColumn columnaward_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisionHistoryDataTable() {
                this.TableName = "revisionHistory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal revisionHistoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected revisionHistoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn revisionHistory_IdColumn {
                get {
                    return this.columnrevisionHistory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn award_IdColumn {
                get {
                    return this.columnaward_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisionHistoryRow this[int index] {
                get {
                    return ((revisionHistoryRow)(this.Rows[index]));
                }
            }
            
            public event revisionHistoryRowChangeEventHandler revisionHistoryRowChanging;
            
            public event revisionHistoryRowChangeEventHandler revisionHistoryRowChanged;
            
            public event revisionHistoryRowChangeEventHandler revisionHistoryRowDeleting;
            
            public event revisionHistoryRowChangeEventHandler revisionHistoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrevisionHistoryRow(revisionHistoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisionHistoryRow AddrevisionHistoryRow(string status, awardRow parentawardRowByaward_revisionHistory) {
                revisionHistoryRow rowrevisionHistoryRow = ((revisionHistoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        status,
                        null,
                        null};
                if ((parentawardRowByaward_revisionHistory != null)) {
                    columnValuesArray[2] = parentawardRowByaward_revisionHistory[12];
                }
                rowrevisionHistoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrevisionHistoryRow);
                return rowrevisionHistoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                revisionHistoryDataTable cln = ((revisionHistoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new revisionHistoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstatus = base.Columns["status"];
                this.columnrevisionHistory_Id = base.Columns["revisionHistory_Id"];
                this.columnaward_Id = base.Columns["award_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstatus);
                this.columnrevisionHistory_Id = new global::System.Data.DataColumn("revisionHistory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrevisionHistory_Id);
                this.columnaward_Id = new global::System.Data.DataColumn("award_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaward_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnrevisionHistory_Id}, true));
                this.columnstatus.AllowDBNull = false;
                this.columnstatus.Namespace = "";
                this.columnrevisionHistory_Id.AutoIncrement = true;
                this.columnrevisionHistory_Id.AllowDBNull = false;
                this.columnrevisionHistory_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisionHistoryRow NewrevisionHistoryRow() {
                return ((revisionHistoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new revisionHistoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(revisionHistoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.revisionHistoryRowChanged != null)) {
                    this.revisionHistoryRowChanged(this, new revisionHistoryRowChangeEvent(((revisionHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.revisionHistoryRowChanging != null)) {
                    this.revisionHistoryRowChanging(this, new revisionHistoryRowChangeEvent(((revisionHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.revisionHistoryRowDeleted != null)) {
                    this.revisionHistoryRowDeleted(this, new revisionHistoryRowChangeEvent(((revisionHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.revisionHistoryRowDeleting != null)) {
                    this.revisionHistoryRowDeleting(this, new revisionHistoryRowChangeEvent(((revisionHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverevisionHistoryRow(revisionHistoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "revisionHistoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class revisedDateDataTable : global::System.Data.TypedTableBase<revisedDateRow> {
            
            private global::System.Data.DataColumn columnversion;
            
            private global::System.Data.DataColumn columnrevisedDate_text;
            
            private global::System.Data.DataColumn columnrevisionHistory_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisedDateDataTable() {
                this.TableName = "revisedDate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal revisedDateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected revisedDateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn revisedDate_textColumn {
                get {
                    return this.columnrevisedDate_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn revisionHistory_IdColumn {
                get {
                    return this.columnrevisionHistory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisedDateRow this[int index] {
                get {
                    return ((revisedDateRow)(this.Rows[index]));
                }
            }
            
            public event revisedDateRowChangeEventHandler revisedDateRowChanging;
            
            public event revisedDateRowChangeEventHandler revisedDateRowChanged;
            
            public event revisedDateRowChangeEventHandler revisedDateRowDeleting;
            
            public event revisedDateRowChangeEventHandler revisedDateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrevisedDateRow(revisedDateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisedDateRow AddrevisedDateRow(long version, System.DateTime revisedDate_text, revisionHistoryRow parentrevisionHistoryRowByrevisionHistory_revisedDate) {
                revisedDateRow rowrevisedDateRow = ((revisedDateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        version,
                        revisedDate_text,
                        null};
                if ((parentrevisionHistoryRowByrevisionHistory_revisedDate != null)) {
                    columnValuesArray[2] = parentrevisionHistoryRowByrevisionHistory_revisedDate[1];
                }
                rowrevisedDateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrevisedDateRow);
                return rowrevisedDateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                revisedDateDataTable cln = ((revisedDateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new revisedDateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnversion = base.Columns["version"];
                this.columnrevisedDate_text = base.Columns["revisedDate_text"];
                this.columnrevisionHistory_Id = base.Columns["revisionHistory_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnversion = new global::System.Data.DataColumn("version", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnversion);
                this.columnrevisedDate_text = new global::System.Data.DataColumn("revisedDate_text", typeof(global::System.DateTime), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnrevisedDate_text);
                this.columnrevisionHistory_Id = new global::System.Data.DataColumn("revisionHistory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrevisionHistory_Id);
                this.columnversion.AllowDBNull = false;
                this.columnversion.Namespace = "";
                this.columnrevisedDate_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisedDateRow NewrevisedDateRow() {
                return ((revisedDateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new revisedDateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(revisedDateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.revisedDateRowChanged != null)) {
                    this.revisedDateRowChanged(this, new revisedDateRowChangeEvent(((revisedDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.revisedDateRowChanging != null)) {
                    this.revisedDateRowChanging(this, new revisedDateRowChangeEvent(((revisedDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.revisedDateRowDeleted != null)) {
                    this.revisedDateRowDeleted(this, new revisedDateRowChangeEvent(((revisedDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.revisedDateRowDeleting != null)) {
                    this.revisedDateRowDeleting(this, new revisedDateRowChangeEvent(((revisedDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverevisedDateRow(revisedDateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "revisedDateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class createdDateDataTable : global::System.Data.TypedTableBase<createdDateRow> {
            
            private global::System.Data.DataColumn columnversion;
            
            private global::System.Data.DataColumn columnrevisedDate_text;
            
            private global::System.Data.DataColumn columnrevisionHistory_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public createdDateDataTable() {
                this.TableName = "createdDate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal createdDateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected createdDateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn revisedDate_textColumn {
                get {
                    return this.columnrevisedDate_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn revisionHistory_IdColumn {
                get {
                    return this.columnrevisionHistory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public createdDateRow this[int index] {
                get {
                    return ((createdDateRow)(this.Rows[index]));
                }
            }
            
            public event createdDateRowChangeEventHandler createdDateRowChanging;
            
            public event createdDateRowChangeEventHandler createdDateRowChanged;
            
            public event createdDateRowChangeEventHandler createdDateRowDeleting;
            
            public event createdDateRowChangeEventHandler createdDateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcreatedDateRow(createdDateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public createdDateRow AddcreatedDateRow(long version, System.DateTime revisedDate_text, revisionHistoryRow parentrevisionHistoryRowByrevisionHistory_createdDate) {
                createdDateRow rowcreatedDateRow = ((createdDateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        version,
                        revisedDate_text,
                        null};
                if ((parentrevisionHistoryRowByrevisionHistory_createdDate != null)) {
                    columnValuesArray[2] = parentrevisionHistoryRowByrevisionHistory_createdDate[1];
                }
                rowcreatedDateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcreatedDateRow);
                return rowcreatedDateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                createdDateDataTable cln = ((createdDateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new createdDateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnversion = base.Columns["version"];
                this.columnrevisedDate_text = base.Columns["revisedDate_text"];
                this.columnrevisionHistory_Id = base.Columns["revisionHistory_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnversion = new global::System.Data.DataColumn("version", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnversion);
                this.columnrevisedDate_text = new global::System.Data.DataColumn("revisedDate_text", typeof(global::System.DateTime), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnrevisedDate_text);
                this.columnrevisionHistory_Id = new global::System.Data.DataColumn("revisionHistory_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrevisionHistory_Id);
                this.columnversion.AllowDBNull = false;
                this.columnversion.Namespace = "";
                this.columnrevisedDate_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public createdDateRow NewcreatedDateRow() {
                return ((createdDateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new createdDateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(createdDateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.createdDateRowChanged != null)) {
                    this.createdDateRowChanged(this, new createdDateRowChangeEvent(((createdDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.createdDateRowChanging != null)) {
                    this.createdDateRowChanging(this, new createdDateRowChangeEvent(((createdDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.createdDateRowDeleted != null)) {
                    this.createdDateRowDeleted(this, new createdDateRowChangeEvent(((createdDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.createdDateRowDeleting != null)) {
                    this.createdDateRowDeleting(this, new createdDateRowChangeEvent(((createdDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecreatedDateRow(createdDateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "createdDateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class amountDataTable : global::System.Data.TypedTableBase<amountRow> {
            
            private global::System.Data.DataColumn columncurrency;
            
            private global::System.Data.DataColumn columnamount_text;
            
            private global::System.Data.DataColumn columnaward_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public amountDataTable() {
                this.TableName = "amount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal amountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected amountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn currencyColumn {
                get {
                    return this.columncurrency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amount_textColumn {
                get {
                    return this.columnamount_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn award_IdColumn {
                get {
                    return this.columnaward_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public amountRow this[int index] {
                get {
                    return ((amountRow)(this.Rows[index]));
                }
            }
            
            public event amountRowChangeEventHandler amountRowChanging;
            
            public event amountRowChangeEventHandler amountRowChanged;
            
            public event amountRowChangeEventHandler amountRowDeleting;
            
            public event amountRowChangeEventHandler amountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddamountRow(amountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public amountRow AddamountRow(string currency, long amount_text, awardRow parentawardRowByaward_amount) {
                amountRow rowamountRow = ((amountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        currency,
                        amount_text,
                        null};
                if ((parentawardRowByaward_amount != null)) {
                    columnValuesArray[2] = parentawardRowByaward_amount[12];
                }
                rowamountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowamountRow);
                return rowamountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                amountDataTable cln = ((amountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new amountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncurrency = base.Columns["currency"];
                this.columnamount_text = base.Columns["amount_text"];
                this.columnaward_Id = base.Columns["award_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncurrency = new global::System.Data.DataColumn("currency", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncurrency);
                this.columnamount_text = new global::System.Data.DataColumn("amount_text", typeof(long), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnamount_text);
                this.columnaward_Id = new global::System.Data.DataColumn("award_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaward_Id);
                this.columncurrency.Namespace = "";
                this.columncurrency.DefaultValue = ((string)("USD"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public amountRow NewamountRow() {
                return ((amountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new amountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(amountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.amountRowChanged != null)) {
                    this.amountRowChanged(this, new amountRowChangeEvent(((amountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.amountRowChanging != null)) {
                    this.amountRowChanging(this, new amountRowChangeEvent(((amountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.amountRowDeleted != null)) {
                    this.amountRowDeleted(this, new amountRowChangeEvent(((amountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.amountRowDeleting != null)) {
                    this.amountRowDeleting(this, new amountRowChangeEvent(((amountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveamountRow(amountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "amountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class classificationGroupDataTable : global::System.Data.TypedTableBase<classificationGroupRow> {
            
            private global::System.Data.DataColumn columnclassificationGroup_Id;
            
            private global::System.Data.DataColumn columnaward_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationGroupDataTable() {
                this.TableName = "classificationGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal classificationGroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected classificationGroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn classificationGroup_IdColumn {
                get {
                    return this.columnclassificationGroup_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn award_IdColumn {
                get {
                    return this.columnaward_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationGroupRow this[int index] {
                get {
                    return ((classificationGroupRow)(this.Rows[index]));
                }
            }
            
            public event classificationGroupRowChangeEventHandler classificationGroupRowChanging;
            
            public event classificationGroupRowChangeEventHandler classificationGroupRowChanged;
            
            public event classificationGroupRowChangeEventHandler classificationGroupRowDeleting;
            
            public event classificationGroupRowChangeEventHandler classificationGroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddclassificationGroupRow(classificationGroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationGroupRow AddclassificationGroupRow(awardRow parentawardRowByaward_classificationGroup) {
                classificationGroupRow rowclassificationGroupRow = ((classificationGroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentawardRowByaward_classificationGroup != null)) {
                    columnValuesArray[1] = parentawardRowByaward_classificationGroup[12];
                }
                rowclassificationGroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowclassificationGroupRow);
                return rowclassificationGroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                classificationGroupDataTable cln = ((classificationGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new classificationGroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnclassificationGroup_Id = base.Columns["classificationGroup_Id"];
                this.columnaward_Id = base.Columns["award_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnclassificationGroup_Id = new global::System.Data.DataColumn("classificationGroup_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnclassificationGroup_Id);
                this.columnaward_Id = new global::System.Data.DataColumn("award_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaward_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnclassificationGroup_Id}, true));
                this.columnclassificationGroup_Id.AutoIncrement = true;
                this.columnclassificationGroup_Id.AllowDBNull = false;
                this.columnclassificationGroup_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationGroupRow NewclassificationGroupRow() {
                return ((classificationGroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new classificationGroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(classificationGroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.classificationGroupRowChanged != null)) {
                    this.classificationGroupRowChanged(this, new classificationGroupRowChangeEvent(((classificationGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.classificationGroupRowChanging != null)) {
                    this.classificationGroupRowChanging(this, new classificationGroupRowChangeEvent(((classificationGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.classificationGroupRowDeleted != null)) {
                    this.classificationGroupRowDeleted(this, new classificationGroupRowChangeEvent(((classificationGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.classificationGroupRowDeleting != null)) {
                    this.classificationGroupRowDeleting(this, new classificationGroupRowChangeEvent(((classificationGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveclassificationGroupRow(classificationGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "classificationGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class classificationsDataTable : global::System.Data.TypedTableBase<classificationsRow> {
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnclassifications_Id;
            
            private global::System.Data.DataColumn columnclassificationGroup_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationsDataTable() {
                this.TableName = "classifications";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal classificationsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected classificationsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn classifications_IdColumn {
                get {
                    return this.columnclassifications_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn classificationGroup_IdColumn {
                get {
                    return this.columnclassificationGroup_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationsRow this[int index] {
                get {
                    return ((classificationsRow)(this.Rows[index]));
                }
            }
            
            public event classificationsRowChangeEventHandler classificationsRowChanging;
            
            public event classificationsRowChangeEventHandler classificationsRowChanged;
            
            public event classificationsRowChangeEventHandler classificationsRowDeleting;
            
            public event classificationsRowChangeEventHandler classificationsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddclassificationsRow(classificationsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationsRow AddclassificationsRow(string type, classificationGroupRow parentclassificationGroupRowByclassificationGroup_classifications) {
                classificationsRow rowclassificationsRow = ((classificationsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        type,
                        null,
                        null};
                if ((parentclassificationGroupRowByclassificationGroup_classifications != null)) {
                    columnValuesArray[2] = parentclassificationGroupRowByclassificationGroup_classifications[0];
                }
                rowclassificationsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowclassificationsRow);
                return rowclassificationsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                classificationsDataTable cln = ((classificationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new classificationsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntype = base.Columns["type"];
                this.columnclassifications_Id = base.Columns["classifications_Id"];
                this.columnclassificationGroup_Id = base.Columns["classificationGroup_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columnclassifications_Id = new global::System.Data.DataColumn("classifications_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnclassifications_Id);
                this.columnclassificationGroup_Id = new global::System.Data.DataColumn("classificationGroup_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnclassificationGroup_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnclassifications_Id}, true));
                this.columntype.AllowDBNull = false;
                this.columntype.Namespace = "";
                this.columnclassifications_Id.AutoIncrement = true;
                this.columnclassifications_Id.AllowDBNull = false;
                this.columnclassifications_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationsRow NewclassificationsRow() {
                return ((classificationsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new classificationsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(classificationsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.classificationsRowChanged != null)) {
                    this.classificationsRowChanged(this, new classificationsRowChangeEvent(((classificationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.classificationsRowChanging != null)) {
                    this.classificationsRowChanging(this, new classificationsRowChangeEvent(((classificationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.classificationsRowDeleted != null)) {
                    this.classificationsRowDeleted(this, new classificationsRowChangeEvent(((classificationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.classificationsRowDeleting != null)) {
                    this.classificationsRowDeleting(this, new classificationsRowChangeEvent(((classificationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveclassificationsRow(classificationsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "classificationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class classificationDataTable : global::System.Data.TypedTableBase<classificationRow> {
            
            private global::System.Data.DataColumn columnfrequency;
            
            private global::System.Data.DataColumn columncode;
            
            private global::System.Data.DataColumn columnclassification_text;
            
            private global::System.Data.DataColumn columnclassifications_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationDataTable() {
                this.TableName = "classification";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal classificationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected classificationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn frequencyColumn {
                get {
                    return this.columnfrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn codeColumn {
                get {
                    return this.columncode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn classification_textColumn {
                get {
                    return this.columnclassification_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn classifications_IdColumn {
                get {
                    return this.columnclassifications_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationRow this[int index] {
                get {
                    return ((classificationRow)(this.Rows[index]));
                }
            }
            
            public event classificationRowChangeEventHandler classificationRowChanging;
            
            public event classificationRowChangeEventHandler classificationRowChanged;
            
            public event classificationRowChangeEventHandler classificationRowDeleting;
            
            public event classificationRowChangeEventHandler classificationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddclassificationRow(classificationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationRow AddclassificationRow(long frequency, string code, string classification_text, classificationsRow parentclassificationsRowByclassifications_classification) {
                classificationRow rowclassificationRow = ((classificationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        frequency,
                        code,
                        classification_text,
                        null};
                if ((parentclassificationsRowByclassifications_classification != null)) {
                    columnValuesArray[3] = parentclassificationsRowByclassifications_classification[1];
                }
                rowclassificationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowclassificationRow);
                return rowclassificationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                classificationDataTable cln = ((classificationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new classificationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfrequency = base.Columns["frequency"];
                this.columncode = base.Columns["code"];
                this.columnclassification_text = base.Columns["classification_text"];
                this.columnclassifications_Id = base.Columns["classifications_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfrequency = new global::System.Data.DataColumn("frequency", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnfrequency);
                this.columncode = new global::System.Data.DataColumn("code", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncode);
                this.columnclassification_text = new global::System.Data.DataColumn("classification_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnclassification_text);
                this.columnclassifications_Id = new global::System.Data.DataColumn("classifications_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnclassifications_Id);
                this.columnfrequency.AllowDBNull = false;
                this.columnfrequency.Namespace = "";
                this.columncode.Namespace = "";
                this.columnclassification_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationRow NewclassificationRow() {
                return ((classificationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new classificationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(classificationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.classificationRowChanged != null)) {
                    this.classificationRowChanged(this, new classificationRowChangeEvent(((classificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.classificationRowChanging != null)) {
                    this.classificationRowChanging(this, new classificationRowChangeEvent(((classificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.classificationRowDeleted != null)) {
                    this.classificationRowDeleted(this, new classificationRowChangeEvent(((classificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.classificationRowDeleting != null)) {
                    this.classificationRowDeleting(this, new classificationRowChangeEvent(((classificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveclassificationRow(classificationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "classificationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class keywordsDataTable : global::System.Data.TypedTableBase<keywordsRow> {
            
            private global::System.Data.DataColumn columnkeywords_Id;
            
            private global::System.Data.DataColumn columnaward_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsDataTable() {
                this.TableName = "keywords";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal keywordsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected keywordsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn keywords_IdColumn {
                get {
                    return this.columnkeywords_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn award_IdColumn {
                get {
                    return this.columnaward_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRow this[int index] {
                get {
                    return ((keywordsRow)(this.Rows[index]));
                }
            }
            
            public event keywordsRowChangeEventHandler keywordsRowChanging;
            
            public event keywordsRowChangeEventHandler keywordsRowChanged;
            
            public event keywordsRowChangeEventHandler keywordsRowDeleting;
            
            public event keywordsRowChangeEventHandler keywordsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddkeywordsRow(keywordsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRow AddkeywordsRow(awardRow parentawardRowByaward_keywords) {
                keywordsRow rowkeywordsRow = ((keywordsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentawardRowByaward_keywords != null)) {
                    columnValuesArray[1] = parentawardRowByaward_keywords[12];
                }
                rowkeywordsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowkeywordsRow);
                return rowkeywordsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                keywordsDataTable cln = ((keywordsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new keywordsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnkeywords_Id = base.Columns["keywords_Id"];
                this.columnaward_Id = base.Columns["award_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnkeywords_Id = new global::System.Data.DataColumn("keywords_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnkeywords_Id);
                this.columnaward_Id = new global::System.Data.DataColumn("award_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaward_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnkeywords_Id}, true));
                this.columnkeywords_Id.AutoIncrement = true;
                this.columnkeywords_Id.AllowDBNull = false;
                this.columnkeywords_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRow NewkeywordsRow() {
                return ((keywordsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new keywordsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(keywordsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.keywordsRowChanged != null)) {
                    this.keywordsRowChanged(this, new keywordsRowChangeEvent(((keywordsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.keywordsRowChanging != null)) {
                    this.keywordsRowChanging(this, new keywordsRowChangeEvent(((keywordsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.keywordsRowDeleted != null)) {
                    this.keywordsRowDeleted(this, new keywordsRowChangeEvent(((keywordsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.keywordsRowDeleting != null)) {
                    this.keywordsRowDeleting(this, new keywordsRowChangeEvent(((keywordsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovekeywordsRow(keywordsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "keywordsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class keywordDataTable : global::System.Data.TypedTableBase<keywordRow> {
            
            private global::System.Data.DataColumn columnkeyword_Column;
            
            private global::System.Data.DataColumn columnkeywords_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordDataTable() {
                this.TableName = "keyword";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal keywordDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected keywordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn keyword_ColumnColumn {
                get {
                    return this.columnkeyword_Column;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn keywords_IdColumn {
                get {
                    return this.columnkeywords_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordRow this[int index] {
                get {
                    return ((keywordRow)(this.Rows[index]));
                }
            }
            
            public event keywordRowChangeEventHandler keywordRowChanging;
            
            public event keywordRowChangeEventHandler keywordRowChanged;
            
            public event keywordRowChangeEventHandler keywordRowDeleting;
            
            public event keywordRowChangeEventHandler keywordRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddkeywordRow(keywordRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordRow AddkeywordRow(string keyword_Column, keywordsRow parentkeywordsRowBykeywords_keyword) {
                keywordRow rowkeywordRow = ((keywordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        keyword_Column,
                        null};
                if ((parentkeywordsRowBykeywords_keyword != null)) {
                    columnValuesArray[1] = parentkeywordsRowBykeywords_keyword[0];
                }
                rowkeywordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowkeywordRow);
                return rowkeywordRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                keywordDataTable cln = ((keywordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new keywordDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnkeyword_Column = base.Columns["keyword_Column"];
                this.columnkeywords_Id = base.Columns["keywords_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnkeyword_Column = new global::System.Data.DataColumn("keyword_Column", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnkeyword_Column);
                this.columnkeywords_Id = new global::System.Data.DataColumn("keywords_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnkeywords_Id);
                this.columnkeyword_Column.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordRow NewkeywordRow() {
                return ((keywordRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new keywordRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(keywordRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.keywordRowChanged != null)) {
                    this.keywordRowChanged(this, new keywordRowChangeEvent(((keywordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.keywordRowChanging != null)) {
                    this.keywordRowChanging(this, new keywordRowChangeEvent(((keywordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.keywordRowDeleted != null)) {
                    this.keywordRowDeleted(this, new keywordRowChangeEvent(((keywordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.keywordRowDeleting != null)) {
                    this.keywordRowDeleting(this, new keywordRowChangeEvent(((keywordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovekeywordRow(keywordRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "keywordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class awardeesDataTable : global::System.Data.TypedTableBase<awardeesRow> {
            
            private global::System.Data.DataColumn columnawardees_Id;
            
            private global::System.Data.DataColumn columnaward_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeesDataTable() {
                this.TableName = "awardees";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardeesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected awardeesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awardees_IdColumn {
                get {
                    return this.columnawardees_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn award_IdColumn {
                get {
                    return this.columnaward_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeesRow this[int index] {
                get {
                    return ((awardeesRow)(this.Rows[index]));
                }
            }
            
            public event awardeesRowChangeEventHandler awardeesRowChanging;
            
            public event awardeesRowChangeEventHandler awardeesRowChanged;
            
            public event awardeesRowChangeEventHandler awardeesRowDeleting;
            
            public event awardeesRowChangeEventHandler awardeesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddawardeesRow(awardeesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeesRow AddawardeesRow(awardRow parentawardRowByaward_awardees) {
                awardeesRow rowawardeesRow = ((awardeesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentawardRowByaward_awardees != null)) {
                    columnValuesArray[1] = parentawardRowByaward_awardees[12];
                }
                rowawardeesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowawardeesRow);
                return rowawardeesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                awardeesDataTable cln = ((awardeesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new awardeesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnawardees_Id = base.Columns["awardees_Id"];
                this.columnaward_Id = base.Columns["award_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnawardees_Id = new global::System.Data.DataColumn("awardees_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawardees_Id);
                this.columnaward_Id = new global::System.Data.DataColumn("award_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaward_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnawardees_Id}, true));
                this.columnawardees_Id.AutoIncrement = true;
                this.columnawardees_Id.AllowDBNull = false;
                this.columnawardees_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeesRow NewawardeesRow() {
                return ((awardeesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new awardeesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(awardeesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.awardeesRowChanged != null)) {
                    this.awardeesRowChanged(this, new awardeesRowChangeEvent(((awardeesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.awardeesRowChanging != null)) {
                    this.awardeesRowChanging(this, new awardeesRowChangeEvent(((awardeesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.awardeesRowDeleted != null)) {
                    this.awardeesRowDeleted(this, new awardeesRowChangeEvent(((awardeesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.awardeesRowDeleting != null)) {
                    this.awardeesRowDeleting(this, new awardeesRowChangeEvent(((awardeesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveawardeesRow(awardeesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "awardeesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class awardeeDataTable : global::System.Data.TypedTableBase<awardeeRow> {
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnScopusAuthorID;
            
            private global::System.Data.DataColumn columnawardee_Id;
            
            private global::System.Data.DataColumn columnawardees_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeDataTable() {
                this.TableName = "awardee";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardeeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected awardeeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScopusAuthorIDColumn {
                get {
                    return this.columnScopusAuthorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awardee_IdColumn {
                get {
                    return this.columnawardee_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awardees_IdColumn {
                get {
                    return this.columnawardees_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeRow this[int index] {
                get {
                    return ((awardeeRow)(this.Rows[index]));
                }
            }
            
            public event awardeeRowChangeEventHandler awardeeRowChanging;
            
            public event awardeeRowChangeEventHandler awardeeRowChanged;
            
            public event awardeeRowChangeEventHandler awardeeRowDeleting;
            
            public event awardeeRowChangeEventHandler awardeeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddawardeeRow(awardeeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeRow AddawardeeRow(string type, long ScopusAuthorID, awardeesRow parentawardeesRowByawardees_awardee) {
                awardeeRow rowawardeeRow = ((awardeeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        type,
                        ScopusAuthorID,
                        null,
                        null};
                if ((parentawardeesRowByawardees_awardee != null)) {
                    columnValuesArray[3] = parentawardeesRowByawardees_awardee[0];
                }
                rowawardeeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowawardeeRow);
                return rowawardeeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                awardeeDataTable cln = ((awardeeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new awardeeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntype = base.Columns["type"];
                this.columnScopusAuthorID = base.Columns["ScopusAuthorID"];
                this.columnawardee_Id = base.Columns["awardee_Id"];
                this.columnawardees_Id = base.Columns["awardees_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columnScopusAuthorID = new global::System.Data.DataColumn("ScopusAuthorID", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnScopusAuthorID);
                this.columnawardee_Id = new global::System.Data.DataColumn("awardee_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawardee_Id);
                this.columnawardees_Id = new global::System.Data.DataColumn("awardees_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawardees_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnawardee_Id}, true));
                this.columntype.AllowDBNull = false;
                this.columntype.Namespace = "";
                this.columnScopusAuthorID.Namespace = "";
                this.columnawardee_Id.AutoIncrement = true;
                this.columnawardee_Id.AllowDBNull = false;
                this.columnawardee_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeRow NewawardeeRow() {
                return ((awardeeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new awardeeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(awardeeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.awardeeRowChanged != null)) {
                    this.awardeeRowChanged(this, new awardeeRowChangeEvent(((awardeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.awardeeRowChanging != null)) {
                    this.awardeeRowChanging(this, new awardeeRowChangeEvent(((awardeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.awardeeRowDeleted != null)) {
                    this.awardeeRowDeleted(this, new awardeeRowChangeEvent(((awardeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.awardeeRowDeleting != null)) {
                    this.awardeeRowDeleting(this, new awardeeRowChangeEvent(((awardeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveawardeeRow(awardeeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "awardeeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class awardeeNameDataTable : global::System.Data.TypedTableBase<awardeeNameRow> {
            
            private global::System.Data.DataColumn columnindexedName;
            
            private global::System.Data.DataColumn columngivenName;
            
            private global::System.Data.DataColumn columninitials;
            
            private global::System.Data.DataColumn columnsurname;
            
            private global::System.Data.DataColumn columnawardee_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeNameDataTable() {
                this.TableName = "awardeeName";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardeeNameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected awardeeNameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexedNameColumn {
                get {
                    return this.columnindexedName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn givenNameColumn {
                get {
                    return this.columngivenName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn initialsColumn {
                get {
                    return this.columninitials;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn surnameColumn {
                get {
                    return this.columnsurname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awardee_IdColumn {
                get {
                    return this.columnawardee_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeNameRow this[int index] {
                get {
                    return ((awardeeNameRow)(this.Rows[index]));
                }
            }
            
            public event awardeeNameRowChangeEventHandler awardeeNameRowChanging;
            
            public event awardeeNameRowChangeEventHandler awardeeNameRowChanged;
            
            public event awardeeNameRowChangeEventHandler awardeeNameRowDeleting;
            
            public event awardeeNameRowChangeEventHandler awardeeNameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddawardeeNameRow(awardeeNameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeNameRow AddawardeeNameRow(string indexedName, string givenName, string initials, string surname, awardeeRow parentawardeeRowByawardee_awardeeName) {
                awardeeNameRow rowawardeeNameRow = ((awardeeNameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        indexedName,
                        givenName,
                        initials,
                        surname,
                        null};
                if ((parentawardeeRowByawardee_awardeeName != null)) {
                    columnValuesArray[4] = parentawardeeRowByawardee_awardeeName[2];
                }
                rowawardeeNameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowawardeeNameRow);
                return rowawardeeNameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                awardeeNameDataTable cln = ((awardeeNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new awardeeNameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnindexedName = base.Columns["indexedName"];
                this.columngivenName = base.Columns["givenName"];
                this.columninitials = base.Columns["initials"];
                this.columnsurname = base.Columns["surname"];
                this.columnawardee_Id = base.Columns["awardee_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnindexedName = new global::System.Data.DataColumn("indexedName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnindexedName);
                this.columngivenName = new global::System.Data.DataColumn("givenName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngivenName);
                this.columninitials = new global::System.Data.DataColumn("initials", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninitials);
                this.columnsurname = new global::System.Data.DataColumn("surname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurname);
                this.columnawardee_Id = new global::System.Data.DataColumn("awardee_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawardee_Id);
                this.columnindexedName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeNameRow NewawardeeNameRow() {
                return ((awardeeNameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new awardeeNameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(awardeeNameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.awardeeNameRowChanged != null)) {
                    this.awardeeNameRowChanged(this, new awardeeNameRowChangeEvent(((awardeeNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.awardeeNameRowChanging != null)) {
                    this.awardeeNameRowChanging(this, new awardeeNameRowChangeEvent(((awardeeNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.awardeeNameRowDeleted != null)) {
                    this.awardeeNameRowDeleted(this, new awardeeNameRowChangeEvent(((awardeeNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.awardeeNameRowDeleting != null)) {
                    this.awardeeNameRowDeleting(this, new awardeeNameRowChangeEvent(((awardeeNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveawardeeNameRow(awardeeNameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "awardeeNameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class awardeeInstitutionDataTable : global::System.Data.TypedTableBase<awardeeInstitutionRow> {
            
            private global::System.Data.DataColumn columnawardeeInstitution_Id;
            
            private global::System.Data.DataColumn columnawardee_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeInstitutionDataTable() {
                this.TableName = "awardeeInstitution";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardeeInstitutionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected awardeeInstitutionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awardeeInstitution_IdColumn {
                get {
                    return this.columnawardeeInstitution_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awardee_IdColumn {
                get {
                    return this.columnawardee_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeInstitutionRow this[int index] {
                get {
                    return ((awardeeInstitutionRow)(this.Rows[index]));
                }
            }
            
            public event awardeeInstitutionRowChangeEventHandler awardeeInstitutionRowChanging;
            
            public event awardeeInstitutionRowChangeEventHandler awardeeInstitutionRowChanged;
            
            public event awardeeInstitutionRowChangeEventHandler awardeeInstitutionRowDeleting;
            
            public event awardeeInstitutionRowChangeEventHandler awardeeInstitutionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddawardeeInstitutionRow(awardeeInstitutionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeInstitutionRow AddawardeeInstitutionRow(awardeeRow parentawardeeRowByawardee_awardeeInstitution) {
                awardeeInstitutionRow rowawardeeInstitutionRow = ((awardeeInstitutionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentawardeeRowByawardee_awardeeInstitution != null)) {
                    columnValuesArray[1] = parentawardeeRowByawardee_awardeeInstitution[2];
                }
                rowawardeeInstitutionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowawardeeInstitutionRow);
                return rowawardeeInstitutionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                awardeeInstitutionDataTable cln = ((awardeeInstitutionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new awardeeInstitutionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnawardeeInstitution_Id = base.Columns["awardeeInstitution_Id"];
                this.columnawardee_Id = base.Columns["awardee_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnawardeeInstitution_Id = new global::System.Data.DataColumn("awardeeInstitution_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawardeeInstitution_Id);
                this.columnawardee_Id = new global::System.Data.DataColumn("awardee_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawardee_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnawardeeInstitution_Id}, true));
                this.columnawardeeInstitution_Id.AutoIncrement = true;
                this.columnawardeeInstitution_Id.AllowDBNull = false;
                this.columnawardeeInstitution_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeInstitutionRow NewawardeeInstitutionRow() {
                return ((awardeeInstitutionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new awardeeInstitutionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(awardeeInstitutionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.awardeeInstitutionRowChanged != null)) {
                    this.awardeeInstitutionRowChanged(this, new awardeeInstitutionRowChangeEvent(((awardeeInstitutionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.awardeeInstitutionRowChanging != null)) {
                    this.awardeeInstitutionRowChanging(this, new awardeeInstitutionRowChangeEvent(((awardeeInstitutionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.awardeeInstitutionRowDeleted != null)) {
                    this.awardeeInstitutionRowDeleted(this, new awardeeInstitutionRowChangeEvent(((awardeeInstitutionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.awardeeInstitutionRowDeleting != null)) {
                    this.awardeeInstitutionRowDeleting(this, new awardeeInstitutionRowChangeEvent(((awardeeInstitutionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveawardeeInstitutionRow(awardeeInstitutionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "awardeeInstitutionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class affiliationDataTable : global::System.Data.TypedTableBase<affiliationRow> {
            
            private global::System.Data.DataColumn columnScopusInstitutionID;
            
            private global::System.Data.DataColumn columnorg;
            
            private global::System.Data.DataColumn columndept;
            
            private global::System.Data.DataColumn columnstartDate;
            
            private global::System.Data.DataColumn columnendDate;
            
            private global::System.Data.DataColumn columnemail;
            
            private global::System.Data.DataColumn columnwebpage;
            
            private global::System.Data.DataColumn columnaffiliation_Id;
            
            private global::System.Data.DataColumn columnawardeeInstitution_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public affiliationDataTable() {
                this.TableName = "affiliation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal affiliationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected affiliationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScopusInstitutionIDColumn {
                get {
                    return this.columnScopusInstitutionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn orgColumn {
                get {
                    return this.columnorg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn deptColumn {
                get {
                    return this.columndept;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startDateColumn {
                get {
                    return this.columnstartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn endDateColumn {
                get {
                    return this.columnendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn webpageColumn {
                get {
                    return this.columnwebpage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn affiliation_IdColumn {
                get {
                    return this.columnaffiliation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awardeeInstitution_IdColumn {
                get {
                    return this.columnawardeeInstitution_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public affiliationRow this[int index] {
                get {
                    return ((affiliationRow)(this.Rows[index]));
                }
            }
            
            public event affiliationRowChangeEventHandler affiliationRowChanging;
            
            public event affiliationRowChangeEventHandler affiliationRowChanged;
            
            public event affiliationRowChangeEventHandler affiliationRowDeleting;
            
            public event affiliationRowChangeEventHandler affiliationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddaffiliationRow(affiliationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public affiliationRow AddaffiliationRow(long ScopusInstitutionID, string org, string dept, System.DateTime startDate, System.DateTime endDate, string email, string webpage, awardeeInstitutionRow parentawardeeInstitutionRowByawardeeInstitution_affiliation) {
                affiliationRow rowaffiliationRow = ((affiliationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ScopusInstitutionID,
                        org,
                        dept,
                        startDate,
                        endDate,
                        email,
                        webpage,
                        null,
                        null};
                if ((parentawardeeInstitutionRowByawardeeInstitution_affiliation != null)) {
                    columnValuesArray[8] = parentawardeeInstitutionRowByawardeeInstitution_affiliation[0];
                }
                rowaffiliationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowaffiliationRow);
                return rowaffiliationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                affiliationDataTable cln = ((affiliationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new affiliationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScopusInstitutionID = base.Columns["ScopusInstitutionID"];
                this.columnorg = base.Columns["org"];
                this.columndept = base.Columns["dept"];
                this.columnstartDate = base.Columns["startDate"];
                this.columnendDate = base.Columns["endDate"];
                this.columnemail = base.Columns["email"];
                this.columnwebpage = base.Columns["webpage"];
                this.columnaffiliation_Id = base.Columns["affiliation_Id"];
                this.columnawardeeInstitution_Id = base.Columns["awardeeInstitution_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScopusInstitutionID = new global::System.Data.DataColumn("ScopusInstitutionID", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnScopusInstitutionID);
                this.columnorg = new global::System.Data.DataColumn("org", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnorg);
                this.columndept = new global::System.Data.DataColumn("dept", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndept);
                this.columnstartDate = new global::System.Data.DataColumn("startDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartDate);
                this.columnendDate = new global::System.Data.DataColumn("endDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnendDate);
                this.columnemail = new global::System.Data.DataColumn("email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.columnwebpage = new global::System.Data.DataColumn("webpage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwebpage);
                this.columnaffiliation_Id = new global::System.Data.DataColumn("affiliation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaffiliation_Id);
                this.columnawardeeInstitution_Id = new global::System.Data.DataColumn("awardeeInstitution_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawardeeInstitution_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnaffiliation_Id}, true));
                this.columnScopusInstitutionID.Namespace = "";
                this.columnorg.AllowDBNull = false;
                this.columnaffiliation_Id.AutoIncrement = true;
                this.columnaffiliation_Id.AllowDBNull = false;
                this.columnaffiliation_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public affiliationRow NewaffiliationRow() {
                return ((affiliationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new affiliationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(affiliationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.affiliationRowChanged != null)) {
                    this.affiliationRowChanged(this, new affiliationRowChangeEvent(((affiliationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.affiliationRowChanging != null)) {
                    this.affiliationRowChanging(this, new affiliationRowChangeEvent(((affiliationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.affiliationRowDeleted != null)) {
                    this.affiliationRowDeleted(this, new affiliationRowChangeEvent(((affiliationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.affiliationRowDeleting != null)) {
                    this.affiliationRowDeleting(this, new affiliationRowChangeEvent(((affiliationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveaffiliationRow(affiliationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "affiliationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class telephoneDataTable : global::System.Data.TypedTableBase<telephoneRow> {
            
            private global::System.Data.DataColumn columntelephone_Column;
            
            private global::System.Data.DataColumn columnaffiliation_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telephoneDataTable() {
                this.TableName = "telephone";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal telephoneDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected telephoneDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn telephone_ColumnColumn {
                get {
                    return this.columntelephone_Column;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn affiliation_IdColumn {
                get {
                    return this.columnaffiliation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telephoneRow this[int index] {
                get {
                    return ((telephoneRow)(this.Rows[index]));
                }
            }
            
            public event telephoneRowChangeEventHandler telephoneRowChanging;
            
            public event telephoneRowChangeEventHandler telephoneRowChanged;
            
            public event telephoneRowChangeEventHandler telephoneRowDeleting;
            
            public event telephoneRowChangeEventHandler telephoneRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtelephoneRow(telephoneRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telephoneRow AddtelephoneRow(string telephone_Column, affiliationRow parentaffiliationRowByaffiliation_telephone) {
                telephoneRow rowtelephoneRow = ((telephoneRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        telephone_Column,
                        null};
                if ((parentaffiliationRowByaffiliation_telephone != null)) {
                    columnValuesArray[1] = parentaffiliationRowByaffiliation_telephone[7];
                }
                rowtelephoneRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtelephoneRow);
                return rowtelephoneRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                telephoneDataTable cln = ((telephoneDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new telephoneDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntelephone_Column = base.Columns["telephone_Column"];
                this.columnaffiliation_Id = base.Columns["affiliation_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntelephone_Column = new global::System.Data.DataColumn("telephone_Column", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columntelephone_Column);
                this.columnaffiliation_Id = new global::System.Data.DataColumn("affiliation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaffiliation_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telephoneRow NewtelephoneRow() {
                return ((telephoneRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new telephoneRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(telephoneRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.telephoneRowChanged != null)) {
                    this.telephoneRowChanged(this, new telephoneRowChangeEvent(((telephoneRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.telephoneRowChanging != null)) {
                    this.telephoneRowChanging(this, new telephoneRowChangeEvent(((telephoneRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.telephoneRowDeleted != null)) {
                    this.telephoneRowDeleted(this, new telephoneRowChangeEvent(((telephoneRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.telephoneRowDeleting != null)) {
                    this.telephoneRowDeleting(this, new telephoneRowChangeEvent(((telephoneRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetelephoneRow(telephoneRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "telephoneDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class faxDataTable : global::System.Data.TypedTableBase<faxRow> {
            
            private global::System.Data.DataColumn columnfax_Column;
            
            private global::System.Data.DataColumn columnaffiliation_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public faxDataTable() {
                this.TableName = "fax";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal faxDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected faxDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fax_ColumnColumn {
                get {
                    return this.columnfax_Column;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn affiliation_IdColumn {
                get {
                    return this.columnaffiliation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public faxRow this[int index] {
                get {
                    return ((faxRow)(this.Rows[index]));
                }
            }
            
            public event faxRowChangeEventHandler faxRowChanging;
            
            public event faxRowChangeEventHandler faxRowChanged;
            
            public event faxRowChangeEventHandler faxRowDeleting;
            
            public event faxRowChangeEventHandler faxRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddfaxRow(faxRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public faxRow AddfaxRow(string fax_Column, affiliationRow parentaffiliationRowByaffiliation_fax) {
                faxRow rowfaxRow = ((faxRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        fax_Column,
                        null};
                if ((parentaffiliationRowByaffiliation_fax != null)) {
                    columnValuesArray[1] = parentaffiliationRowByaffiliation_fax[7];
                }
                rowfaxRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowfaxRow);
                return rowfaxRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                faxDataTable cln = ((faxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new faxDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfax_Column = base.Columns["fax_Column"];
                this.columnaffiliation_Id = base.Columns["affiliation_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfax_Column = new global::System.Data.DataColumn("fax_Column", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnfax_Column);
                this.columnaffiliation_Id = new global::System.Data.DataColumn("affiliation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaffiliation_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public faxRow NewfaxRow() {
                return ((faxRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new faxRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(faxRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.faxRowChanged != null)) {
                    this.faxRowChanged(this, new faxRowChangeEvent(((faxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.faxRowChanging != null)) {
                    this.faxRowChanging(this, new faxRowChangeEvent(((faxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.faxRowDeleted != null)) {
                    this.faxRowDeleted(this, new faxRowChangeEvent(((faxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.faxRowDeleting != null)) {
                    this.faxRowDeleting(this, new faxRowChangeEvent(((faxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovefaxRow(faxRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "faxDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class awardManagersDataTable : global::System.Data.TypedTableBase<awardManagersRow> {
            
            private global::System.Data.DataColumn columnawardManagers_Id;
            
            private global::System.Data.DataColumn columnaward_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagersDataTable() {
                this.TableName = "awardManagers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardManagersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected awardManagersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awardManagers_IdColumn {
                get {
                    return this.columnawardManagers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn award_IdColumn {
                get {
                    return this.columnaward_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagersRow this[int index] {
                get {
                    return ((awardManagersRow)(this.Rows[index]));
                }
            }
            
            public event awardManagersRowChangeEventHandler awardManagersRowChanging;
            
            public event awardManagersRowChangeEventHandler awardManagersRowChanged;
            
            public event awardManagersRowChangeEventHandler awardManagersRowDeleting;
            
            public event awardManagersRowChangeEventHandler awardManagersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddawardManagersRow(awardManagersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagersRow AddawardManagersRow(awardRow parentawardRowByaward_awardManagers) {
                awardManagersRow rowawardManagersRow = ((awardManagersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentawardRowByaward_awardManagers != null)) {
                    columnValuesArray[1] = parentawardRowByaward_awardManagers[12];
                }
                rowawardManagersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowawardManagersRow);
                return rowawardManagersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                awardManagersDataTable cln = ((awardManagersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new awardManagersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnawardManagers_Id = base.Columns["awardManagers_Id"];
                this.columnaward_Id = base.Columns["award_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnawardManagers_Id = new global::System.Data.DataColumn("awardManagers_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawardManagers_Id);
                this.columnaward_Id = new global::System.Data.DataColumn("award_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaward_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnawardManagers_Id}, true));
                this.columnawardManagers_Id.AutoIncrement = true;
                this.columnawardManagers_Id.AllowDBNull = false;
                this.columnawardManagers_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagersRow NewawardManagersRow() {
                return ((awardManagersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new awardManagersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(awardManagersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.awardManagersRowChanged != null)) {
                    this.awardManagersRowChanged(this, new awardManagersRowChangeEvent(((awardManagersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.awardManagersRowChanging != null)) {
                    this.awardManagersRowChanging(this, new awardManagersRowChangeEvent(((awardManagersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.awardManagersRowDeleted != null)) {
                    this.awardManagersRowDeleted(this, new awardManagersRowChangeEvent(((awardManagersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.awardManagersRowDeleting != null)) {
                    this.awardManagersRowDeleting(this, new awardManagersRowChangeEvent(((awardManagersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveawardManagersRow(awardManagersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "awardManagersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class awardManagerDataTable : global::System.Data.TypedTableBase<awardManagerRow> {
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columntitle;
            
            private global::System.Data.DataColumn columntelephone;
            
            private global::System.Data.DataColumn columnfax;
            
            private global::System.Data.DataColumn columnemail;
            
            private global::System.Data.DataColumn columnawardManager_Id;
            
            private global::System.Data.DataColumn columnawardManagers_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagerDataTable() {
                this.TableName = "awardManager";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardManagerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected awardManagerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn telephoneColumn {
                get {
                    return this.columntelephone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn faxColumn {
                get {
                    return this.columnfax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awardManager_IdColumn {
                get {
                    return this.columnawardManager_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awardManagers_IdColumn {
                get {
                    return this.columnawardManagers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagerRow this[int index] {
                get {
                    return ((awardManagerRow)(this.Rows[index]));
                }
            }
            
            public event awardManagerRowChangeEventHandler awardManagerRowChanging;
            
            public event awardManagerRowChangeEventHandler awardManagerRowChanged;
            
            public event awardManagerRowChangeEventHandler awardManagerRowDeleting;
            
            public event awardManagerRowChangeEventHandler awardManagerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddawardManagerRow(awardManagerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagerRow AddawardManagerRow(string type, string title, string telephone, string fax, string email, awardManagersRow parentawardManagersRowByawardManagers_awardManager) {
                awardManagerRow rowawardManagerRow = ((awardManagerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        type,
                        title,
                        telephone,
                        fax,
                        email,
                        null,
                        null};
                if ((parentawardManagersRowByawardManagers_awardManager != null)) {
                    columnValuesArray[6] = parentawardManagersRowByawardManagers_awardManager[0];
                }
                rowawardManagerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowawardManagerRow);
                return rowawardManagerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                awardManagerDataTable cln = ((awardManagerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new awardManagerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntype = base.Columns["type"];
                this.columntitle = base.Columns["title"];
                this.columntelephone = base.Columns["telephone"];
                this.columnfax = base.Columns["fax"];
                this.columnemail = base.Columns["email"];
                this.columnawardManager_Id = base.Columns["awardManager_Id"];
                this.columnawardManagers_Id = base.Columns["awardManagers_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columntitle = new global::System.Data.DataColumn("title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columntelephone = new global::System.Data.DataColumn("telephone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntelephone);
                this.columnfax = new global::System.Data.DataColumn("fax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfax);
                this.columnemail = new global::System.Data.DataColumn("email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.columnawardManager_Id = new global::System.Data.DataColumn("awardManager_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawardManager_Id);
                this.columnawardManagers_Id = new global::System.Data.DataColumn("awardManagers_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawardManagers_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnawardManager_Id}, true));
                this.columntype.Namespace = "";
                this.columnawardManager_Id.AutoIncrement = true;
                this.columnawardManager_Id.AllowDBNull = false;
                this.columnawardManager_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagerRow NewawardManagerRow() {
                return ((awardManagerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new awardManagerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(awardManagerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.awardManagerRowChanged != null)) {
                    this.awardManagerRowChanged(this, new awardManagerRowChangeEvent(((awardManagerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.awardManagerRowChanging != null)) {
                    this.awardManagerRowChanging(this, new awardManagerRowChangeEvent(((awardManagerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.awardManagerRowDeleted != null)) {
                    this.awardManagerRowDeleted(this, new awardManagerRowChangeEvent(((awardManagerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.awardManagerRowDeleting != null)) {
                    this.awardManagerRowDeleting(this, new awardManagerRowChangeEvent(((awardManagerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveawardManagerRow(awardManagerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "awardManagerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class contactNameDataTable : global::System.Data.TypedTableBase<contactNameRow> {
            
            private global::System.Data.DataColumn columnprefix;
            
            private global::System.Data.DataColumn columngivenName;
            
            private global::System.Data.DataColumn columnmiddleName;
            
            private global::System.Data.DataColumn columnsurname;
            
            private global::System.Data.DataColumn columnsuffix;
            
            private global::System.Data.DataColumn columnawardManager_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactNameDataTable() {
                this.TableName = "contactName";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contactNameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected contactNameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prefixColumn {
                get {
                    return this.columnprefix;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn givenNameColumn {
                get {
                    return this.columngivenName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn middleNameColumn {
                get {
                    return this.columnmiddleName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn surnameColumn {
                get {
                    return this.columnsurname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn suffixColumn {
                get {
                    return this.columnsuffix;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awardManager_IdColumn {
                get {
                    return this.columnawardManager_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactNameRow this[int index] {
                get {
                    return ((contactNameRow)(this.Rows[index]));
                }
            }
            
            public event contactNameRowChangeEventHandler contactNameRowChanging;
            
            public event contactNameRowChangeEventHandler contactNameRowChanged;
            
            public event contactNameRowChangeEventHandler contactNameRowDeleting;
            
            public event contactNameRowChangeEventHandler contactNameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcontactNameRow(contactNameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactNameRow AddcontactNameRow(string prefix, string givenName, string middleName, string surname, string suffix, awardManagerRow parentawardManagerRowByawardManager_contactName) {
                contactNameRow rowcontactNameRow = ((contactNameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        prefix,
                        givenName,
                        middleName,
                        surname,
                        suffix,
                        null};
                if ((parentawardManagerRowByawardManager_contactName != null)) {
                    columnValuesArray[5] = parentawardManagerRowByawardManager_contactName[5];
                }
                rowcontactNameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcontactNameRow);
                return rowcontactNameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                contactNameDataTable cln = ((contactNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new contactNameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprefix = base.Columns["prefix"];
                this.columngivenName = base.Columns["givenName"];
                this.columnmiddleName = base.Columns["middleName"];
                this.columnsurname = base.Columns["surname"];
                this.columnsuffix = base.Columns["suffix"];
                this.columnawardManager_Id = base.Columns["awardManager_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprefix = new global::System.Data.DataColumn("prefix", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprefix);
                this.columngivenName = new global::System.Data.DataColumn("givenName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngivenName);
                this.columnmiddleName = new global::System.Data.DataColumn("middleName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmiddleName);
                this.columnsurname = new global::System.Data.DataColumn("surname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurname);
                this.columnsuffix = new global::System.Data.DataColumn("suffix", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsuffix);
                this.columnawardManager_Id = new global::System.Data.DataColumn("awardManager_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawardManager_Id);
                this.columngivenName.AllowDBNull = false;
                this.columnsurname.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactNameRow NewcontactNameRow() {
                return ((contactNameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new contactNameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(contactNameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.contactNameRowChanged != null)) {
                    this.contactNameRowChanged(this, new contactNameRowChangeEvent(((contactNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.contactNameRowChanging != null)) {
                    this.contactNameRowChanging(this, new contactNameRowChangeEvent(((contactNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.contactNameRowDeleted != null)) {
                    this.contactNameRowDeleted(this, new contactNameRowChangeEvent(((contactNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.contactNameRowDeleting != null)) {
                    this.contactNameRowDeleting(this, new contactNameRowChangeEvent(((contactNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecontactNameRow(contactNameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "contactNameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class websiteDataTable : global::System.Data.TypedTableBase<websiteRow> {
            
            private global::System.Data.DataColumn columnurl;
            
            private global::System.Data.DataColumn columnwebsite_text;
            
            private global::System.Data.DataColumn columnawardManager_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public websiteDataTable() {
                this.TableName = "website";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal websiteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected websiteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn urlColumn {
                get {
                    return this.columnurl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn website_textColumn {
                get {
                    return this.columnwebsite_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn awardManager_IdColumn {
                get {
                    return this.columnawardManager_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public websiteRow this[int index] {
                get {
                    return ((websiteRow)(this.Rows[index]));
                }
            }
            
            public event websiteRowChangeEventHandler websiteRowChanging;
            
            public event websiteRowChangeEventHandler websiteRowChanged;
            
            public event websiteRowChangeEventHandler websiteRowDeleting;
            
            public event websiteRowChangeEventHandler websiteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddwebsiteRow(websiteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public websiteRow AddwebsiteRow(string url, string website_text, awardManagerRow parentawardManagerRowByawardManager_website) {
                websiteRow rowwebsiteRow = ((websiteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        url,
                        website_text,
                        null};
                if ((parentawardManagerRowByawardManager_website != null)) {
                    columnValuesArray[2] = parentawardManagerRowByawardManager_website[5];
                }
                rowwebsiteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowwebsiteRow);
                return rowwebsiteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                websiteDataTable cln = ((websiteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new websiteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnurl = base.Columns["url"];
                this.columnwebsite_text = base.Columns["website_text"];
                this.columnawardManager_Id = base.Columns["awardManager_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnurl = new global::System.Data.DataColumn("url", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnurl);
                this.columnwebsite_text = new global::System.Data.DataColumn("website_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnwebsite_text);
                this.columnawardManager_Id = new global::System.Data.DataColumn("awardManager_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnawardManager_Id);
                this.columnurl.AllowDBNull = false;
                this.columnurl.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public websiteRow NewwebsiteRow() {
                return ((websiteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new websiteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(websiteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.websiteRowChanged != null)) {
                    this.websiteRowChanged(this, new websiteRowChangeEvent(((websiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.websiteRowChanging != null)) {
                    this.websiteRowChanging(this, new websiteRowChangeEvent(((websiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.websiteRowDeleted != null)) {
                    this.websiteRowDeleted(this, new websiteRowChangeEvent(((websiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.websiteRowDeleting != null)) {
                    this.websiteRowDeleting(this, new websiteRowChangeEvent(((websiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovewebsiteRow(websiteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "websiteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class relatedProgramsDataTable : global::System.Data.TypedTableBase<relatedProgramsRow> {
            
            private global::System.Data.DataColumn columnhierarchy;
            
            private global::System.Data.DataColumn columnrelatedPrograms_Id;
            
            private global::System.Data.DataColumn columnaward_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramsDataTable() {
                this.TableName = "relatedPrograms";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal relatedProgramsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected relatedProgramsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hierarchyColumn {
                get {
                    return this.columnhierarchy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn relatedPrograms_IdColumn {
                get {
                    return this.columnrelatedPrograms_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn award_IdColumn {
                get {
                    return this.columnaward_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramsRow this[int index] {
                get {
                    return ((relatedProgramsRow)(this.Rows[index]));
                }
            }
            
            public event relatedProgramsRowChangeEventHandler relatedProgramsRowChanging;
            
            public event relatedProgramsRowChangeEventHandler relatedProgramsRowChanged;
            
            public event relatedProgramsRowChangeEventHandler relatedProgramsRowDeleting;
            
            public event relatedProgramsRowChangeEventHandler relatedProgramsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrelatedProgramsRow(relatedProgramsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramsRow AddrelatedProgramsRow(string hierarchy, awardRow parentawardRowByaward_relatedPrograms) {
                relatedProgramsRow rowrelatedProgramsRow = ((relatedProgramsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        hierarchy,
                        null,
                        null};
                if ((parentawardRowByaward_relatedPrograms != null)) {
                    columnValuesArray[2] = parentawardRowByaward_relatedPrograms[12];
                }
                rowrelatedProgramsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrelatedProgramsRow);
                return rowrelatedProgramsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                relatedProgramsDataTable cln = ((relatedProgramsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new relatedProgramsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnhierarchy = base.Columns["hierarchy"];
                this.columnrelatedPrograms_Id = base.Columns["relatedPrograms_Id"];
                this.columnaward_Id = base.Columns["award_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnhierarchy = new global::System.Data.DataColumn("hierarchy", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnhierarchy);
                this.columnrelatedPrograms_Id = new global::System.Data.DataColumn("relatedPrograms_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrelatedPrograms_Id);
                this.columnaward_Id = new global::System.Data.DataColumn("award_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaward_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnrelatedPrograms_Id}, true));
                this.columnhierarchy.Namespace = "";
                this.columnrelatedPrograms_Id.AutoIncrement = true;
                this.columnrelatedPrograms_Id.AllowDBNull = false;
                this.columnrelatedPrograms_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramsRow NewrelatedProgramsRow() {
                return ((relatedProgramsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new relatedProgramsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(relatedProgramsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.relatedProgramsRowChanged != null)) {
                    this.relatedProgramsRowChanged(this, new relatedProgramsRowChangeEvent(((relatedProgramsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.relatedProgramsRowChanging != null)) {
                    this.relatedProgramsRowChanging(this, new relatedProgramsRowChangeEvent(((relatedProgramsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.relatedProgramsRowDeleted != null)) {
                    this.relatedProgramsRowDeleted(this, new relatedProgramsRowChangeEvent(((relatedProgramsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.relatedProgramsRowDeleting != null)) {
                    this.relatedProgramsRowDeleting(this, new relatedProgramsRowChangeEvent(((relatedProgramsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverelatedProgramsRow(relatedProgramsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "relatedProgramsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class relatedProgramDataTable : global::System.Data.TypedTableBase<relatedProgramRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnrelType;
            
            private global::System.Data.DataColumn columnrelatedProgram_text;
            
            private global::System.Data.DataColumn columnrelatedPrograms_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramDataTable() {
                this.TableName = "relatedProgram";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal relatedProgramDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected relatedProgramDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn relTypeColumn {
                get {
                    return this.columnrelType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn relatedProgram_textColumn {
                get {
                    return this.columnrelatedProgram_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn relatedPrograms_IdColumn {
                get {
                    return this.columnrelatedPrograms_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramRow this[int index] {
                get {
                    return ((relatedProgramRow)(this.Rows[index]));
                }
            }
            
            public event relatedProgramRowChangeEventHandler relatedProgramRowChanging;
            
            public event relatedProgramRowChangeEventHandler relatedProgramRowChanged;
            
            public event relatedProgramRowChangeEventHandler relatedProgramRowDeleting;
            
            public event relatedProgramRowChangeEventHandler relatedProgramRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrelatedProgramRow(relatedProgramRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramRow AddrelatedProgramRow(long id, string relType, string relatedProgram_text, relatedProgramsRow parentrelatedProgramsRowByrelatedPrograms_relatedProgram) {
                relatedProgramRow rowrelatedProgramRow = ((relatedProgramRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        relType,
                        relatedProgram_text,
                        null};
                if ((parentrelatedProgramsRowByrelatedPrograms_relatedProgram != null)) {
                    columnValuesArray[3] = parentrelatedProgramsRowByrelatedPrograms_relatedProgram[1];
                }
                rowrelatedProgramRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrelatedProgramRow);
                return rowrelatedProgramRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                relatedProgramDataTable cln = ((relatedProgramDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new relatedProgramDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnrelType = base.Columns["relType"];
                this.columnrelatedProgram_text = base.Columns["relatedProgram_text"];
                this.columnrelatedPrograms_Id = base.Columns["relatedPrograms_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnrelType = new global::System.Data.DataColumn("relType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnrelType);
                this.columnrelatedProgram_text = new global::System.Data.DataColumn("relatedProgram_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnrelatedProgram_text);
                this.columnrelatedPrograms_Id = new global::System.Data.DataColumn("relatedPrograms_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrelatedPrograms_Id);
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnrelType.AllowDBNull = false;
                this.columnrelType.Namespace = "";
                this.columnrelatedProgram_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramRow NewrelatedProgramRow() {
                return ((relatedProgramRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new relatedProgramRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(relatedProgramRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.relatedProgramRowChanged != null)) {
                    this.relatedProgramRowChanged(this, new relatedProgramRowChangeEvent(((relatedProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.relatedProgramRowChanging != null)) {
                    this.relatedProgramRowChanging(this, new relatedProgramRowChangeEvent(((relatedProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.relatedProgramRowDeleted != null)) {
                    this.relatedProgramRowDeleted(this, new relatedProgramRowChangeEvent(((relatedProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.relatedProgramRowDeleting != null)) {
                    this.relatedProgramRowDeleting(this, new relatedProgramRowChangeEvent(((relatedProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverelatedProgramRow(relatedProgramRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "relatedProgramDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class relatedFundingBodiesDataTable : global::System.Data.TypedTableBase<relatedFundingBodiesRow> {
            
            private global::System.Data.DataColumn columnhierarchy;
            
            private global::System.Data.DataColumn columnrelatedFundingBodies_Id;
            
            private global::System.Data.DataColumn columnaward_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedFundingBodiesDataTable() {
                this.TableName = "relatedFundingBodies";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal relatedFundingBodiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected relatedFundingBodiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hierarchyColumn {
                get {
                    return this.columnhierarchy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn relatedFundingBodies_IdColumn {
                get {
                    return this.columnrelatedFundingBodies_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn award_IdColumn {
                get {
                    return this.columnaward_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedFundingBodiesRow this[int index] {
                get {
                    return ((relatedFundingBodiesRow)(this.Rows[index]));
                }
            }
            
            public event relatedFundingBodiesRowChangeEventHandler relatedFundingBodiesRowChanging;
            
            public event relatedFundingBodiesRowChangeEventHandler relatedFundingBodiesRowChanged;
            
            public event relatedFundingBodiesRowChangeEventHandler relatedFundingBodiesRowDeleting;
            
            public event relatedFundingBodiesRowChangeEventHandler relatedFundingBodiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrelatedFundingBodiesRow(relatedFundingBodiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedFundingBodiesRow AddrelatedFundingBodiesRow(string hierarchy, awardRow parentawardRowByaward_relatedFundingBodies) {
                relatedFundingBodiesRow rowrelatedFundingBodiesRow = ((relatedFundingBodiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        hierarchy,
                        null,
                        null};
                if ((parentawardRowByaward_relatedFundingBodies != null)) {
                    columnValuesArray[2] = parentawardRowByaward_relatedFundingBodies[12];
                }
                rowrelatedFundingBodiesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrelatedFundingBodiesRow);
                return rowrelatedFundingBodiesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                relatedFundingBodiesDataTable cln = ((relatedFundingBodiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new relatedFundingBodiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnhierarchy = base.Columns["hierarchy"];
                this.columnrelatedFundingBodies_Id = base.Columns["relatedFundingBodies_Id"];
                this.columnaward_Id = base.Columns["award_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnhierarchy = new global::System.Data.DataColumn("hierarchy", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnhierarchy);
                this.columnrelatedFundingBodies_Id = new global::System.Data.DataColumn("relatedFundingBodies_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrelatedFundingBodies_Id);
                this.columnaward_Id = new global::System.Data.DataColumn("award_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaward_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnrelatedFundingBodies_Id}, true));
                this.columnhierarchy.Namespace = "";
                this.columnrelatedFundingBodies_Id.AutoIncrement = true;
                this.columnrelatedFundingBodies_Id.AllowDBNull = false;
                this.columnrelatedFundingBodies_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedFundingBodiesRow NewrelatedFundingBodiesRow() {
                return ((relatedFundingBodiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new relatedFundingBodiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(relatedFundingBodiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.relatedFundingBodiesRowChanged != null)) {
                    this.relatedFundingBodiesRowChanged(this, new relatedFundingBodiesRowChangeEvent(((relatedFundingBodiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.relatedFundingBodiesRowChanging != null)) {
                    this.relatedFundingBodiesRowChanging(this, new relatedFundingBodiesRowChangeEvent(((relatedFundingBodiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.relatedFundingBodiesRowDeleted != null)) {
                    this.relatedFundingBodiesRowDeleted(this, new relatedFundingBodiesRowChangeEvent(((relatedFundingBodiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.relatedFundingBodiesRowDeleting != null)) {
                    this.relatedFundingBodiesRowDeleting(this, new relatedFundingBodiesRowChangeEvent(((relatedFundingBodiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverelatedFundingBodiesRow(relatedFundingBodiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "relatedFundingBodiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class orgDataTable : global::System.Data.TypedTableBase<orgRow> {
            
            private global::System.Data.DataColumn columnorgDbId;
            
            private global::System.Data.DataColumn columnrelType;
            
            private global::System.Data.DataColumn columnorg_text;
            
            private global::System.Data.DataColumn columnrelatedFundingBodies_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public orgDataTable() {
                this.TableName = "org";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal orgDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected orgDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn orgDbIdColumn {
                get {
                    return this.columnorgDbId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn relTypeColumn {
                get {
                    return this.columnrelType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn org_textColumn {
                get {
                    return this.columnorg_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn relatedFundingBodies_IdColumn {
                get {
                    return this.columnrelatedFundingBodies_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public orgRow this[int index] {
                get {
                    return ((orgRow)(this.Rows[index]));
                }
            }
            
            public event orgRowChangeEventHandler orgRowChanging;
            
            public event orgRowChangeEventHandler orgRowChanged;
            
            public event orgRowChangeEventHandler orgRowDeleting;
            
            public event orgRowChangeEventHandler orgRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddorgRow(orgRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public orgRow AddorgRow(long orgDbId, string relType, string org_text, relatedFundingBodiesRow parentrelatedFundingBodiesRowByrelatedFundingBodies_org) {
                orgRow roworgRow = ((orgRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        orgDbId,
                        relType,
                        org_text,
                        null};
                if ((parentrelatedFundingBodiesRowByrelatedFundingBodies_org != null)) {
                    columnValuesArray[3] = parentrelatedFundingBodiesRowByrelatedFundingBodies_org[1];
                }
                roworgRow.ItemArray = columnValuesArray;
                this.Rows.Add(roworgRow);
                return roworgRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                orgDataTable cln = ((orgDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new orgDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnorgDbId = base.Columns["orgDbId"];
                this.columnrelType = base.Columns["relType"];
                this.columnorg_text = base.Columns["org_text"];
                this.columnrelatedFundingBodies_Id = base.Columns["relatedFundingBodies_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnorgDbId = new global::System.Data.DataColumn("orgDbId", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnorgDbId);
                this.columnrelType = new global::System.Data.DataColumn("relType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnrelType);
                this.columnorg_text = new global::System.Data.DataColumn("org_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnorg_text);
                this.columnrelatedFundingBodies_Id = new global::System.Data.DataColumn("relatedFundingBodies_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrelatedFundingBodies_Id);
                this.columnorgDbId.AllowDBNull = false;
                this.columnorgDbId.Namespace = "";
                this.columnrelType.AllowDBNull = false;
                this.columnrelType.Namespace = "";
                this.columnorg_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public orgRow NeworgRow() {
                return ((orgRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new orgRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(orgRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.orgRowChanged != null)) {
                    this.orgRowChanged(this, new orgRowChangeEvent(((orgRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.orgRowChanging != null)) {
                    this.orgRowChanging(this, new orgRowChangeEvent(((orgRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.orgRowDeleted != null)) {
                    this.orgRowDeleted(this, new orgRowChangeEvent(((orgRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.orgRowDeleting != null)) {
                    this.orgRowDeleting(this, new orgRowChangeEvent(((orgRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveorgRow(orgRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "orgDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class relatedItemsDataTable : global::System.Data.TypedTableBase<relatedItemsRow> {
            
            private global::System.Data.DataColumn columnrelatedItems_Id;
            
            private global::System.Data.DataColumn columnaward_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedItemsDataTable() {
                this.TableName = "relatedItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal relatedItemsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected relatedItemsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn relatedItems_IdColumn {
                get {
                    return this.columnrelatedItems_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn award_IdColumn {
                get {
                    return this.columnaward_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedItemsRow this[int index] {
                get {
                    return ((relatedItemsRow)(this.Rows[index]));
                }
            }
            
            public event relatedItemsRowChangeEventHandler relatedItemsRowChanging;
            
            public event relatedItemsRowChangeEventHandler relatedItemsRowChanged;
            
            public event relatedItemsRowChangeEventHandler relatedItemsRowDeleting;
            
            public event relatedItemsRowChangeEventHandler relatedItemsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrelatedItemsRow(relatedItemsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedItemsRow AddrelatedItemsRow(awardRow parentawardRowByaward_relatedItems) {
                relatedItemsRow rowrelatedItemsRow = ((relatedItemsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentawardRowByaward_relatedItems != null)) {
                    columnValuesArray[1] = parentawardRowByaward_relatedItems[12];
                }
                rowrelatedItemsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrelatedItemsRow);
                return rowrelatedItemsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                relatedItemsDataTable cln = ((relatedItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new relatedItemsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrelatedItems_Id = base.Columns["relatedItems_Id"];
                this.columnaward_Id = base.Columns["award_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrelatedItems_Id = new global::System.Data.DataColumn("relatedItems_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrelatedItems_Id);
                this.columnaward_Id = new global::System.Data.DataColumn("award_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaward_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnrelatedItems_Id}, true));
                this.columnrelatedItems_Id.AutoIncrement = true;
                this.columnrelatedItems_Id.AllowDBNull = false;
                this.columnrelatedItems_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedItemsRow NewrelatedItemsRow() {
                return ((relatedItemsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new relatedItemsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(relatedItemsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.relatedItemsRowChanged != null)) {
                    this.relatedItemsRowChanged(this, new relatedItemsRowChangeEvent(((relatedItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.relatedItemsRowChanging != null)) {
                    this.relatedItemsRowChanging(this, new relatedItemsRowChangeEvent(((relatedItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.relatedItemsRowDeleted != null)) {
                    this.relatedItemsRowDeleted(this, new relatedItemsRowChangeEvent(((relatedItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.relatedItemsRowDeleting != null)) {
                    this.relatedItemsRowDeleting(this, new relatedItemsRowChangeEvent(((relatedItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverelatedItemsRow(relatedItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "relatedItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class itemDataTable : global::System.Data.TypedTableBase<itemRow> {
            
            private global::System.Data.DataColumn columnrelType;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columnitem_Id;
            
            private global::System.Data.DataColumn columnrelatedItems_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemDataTable() {
                this.TableName = "item";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal itemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected itemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn relTypeColumn {
                get {
                    return this.columnrelType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn item_IdColumn {
                get {
                    return this.columnitem_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn relatedItems_IdColumn {
                get {
                    return this.columnrelatedItems_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow this[int index] {
                get {
                    return ((itemRow)(this.Rows[index]));
                }
            }
            
            public event itemRowChangeEventHandler itemRowChanging;
            
            public event itemRowChangeEventHandler itemRowChanged;
            
            public event itemRowChangeEventHandler itemRowDeleting;
            
            public event itemRowChangeEventHandler itemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdditemRow(itemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow AdditemRow(string relType, string description, relatedItemsRow parentrelatedItemsRowByrelatedItems_item) {
                itemRow rowitemRow = ((itemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        relType,
                        description,
                        null,
                        null};
                if ((parentrelatedItemsRowByrelatedItems_item != null)) {
                    columnValuesArray[3] = parentrelatedItemsRowByrelatedItems_item[0];
                }
                rowitemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowitemRow);
                return rowitemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                itemDataTable cln = ((itemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new itemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrelType = base.Columns["relType"];
                this.columndescription = base.Columns["description"];
                this.columnitem_Id = base.Columns["item_Id"];
                this.columnrelatedItems_Id = base.Columns["relatedItems_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrelType = new global::System.Data.DataColumn("relType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnrelType);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columnitem_Id = new global::System.Data.DataColumn("item_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnitem_Id);
                this.columnrelatedItems_Id = new global::System.Data.DataColumn("relatedItems_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrelatedItems_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnitem_Id}, true));
                this.columnrelType.Namespace = "";
                this.columnitem_Id.AutoIncrement = true;
                this.columnitem_Id.AllowDBNull = false;
                this.columnitem_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow NewitemRow() {
                return ((itemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new itemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(itemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.itemRowChanged != null)) {
                    this.itemRowChanged(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.itemRowChanging != null)) {
                    this.itemRowChanging(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.itemRowDeleted != null)) {
                    this.itemRowDeleted(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.itemRowDeleting != null)) {
                    this.itemRowDeleting(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveitemRow(itemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "itemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class linkDataTable : global::System.Data.TypedTableBase<linkRow> {
            
            private global::System.Data.DataColumn columnurl;
            
            private global::System.Data.DataColumn columnwebsite_text;
            
            private global::System.Data.DataColumn columnitem_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkDataTable() {
                this.TableName = "link";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal linkDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected linkDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn urlColumn {
                get {
                    return this.columnurl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn website_textColumn {
                get {
                    return this.columnwebsite_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn item_IdColumn {
                get {
                    return this.columnitem_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkRow this[int index] {
                get {
                    return ((linkRow)(this.Rows[index]));
                }
            }
            
            public event linkRowChangeEventHandler linkRowChanging;
            
            public event linkRowChangeEventHandler linkRowChanged;
            
            public event linkRowChangeEventHandler linkRowDeleting;
            
            public event linkRowChangeEventHandler linkRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddlinkRow(linkRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkRow AddlinkRow(string url, string website_text, itemRow parentitemRowByitem_link) {
                linkRow rowlinkRow = ((linkRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        url,
                        website_text,
                        null};
                if ((parentitemRowByitem_link != null)) {
                    columnValuesArray[2] = parentitemRowByitem_link[2];
                }
                rowlinkRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowlinkRow);
                return rowlinkRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                linkDataTable cln = ((linkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new linkDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnurl = base.Columns["url"];
                this.columnwebsite_text = base.Columns["website_text"];
                this.columnitem_Id = base.Columns["item_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnurl = new global::System.Data.DataColumn("url", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnurl);
                this.columnwebsite_text = new global::System.Data.DataColumn("website_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnwebsite_text);
                this.columnitem_Id = new global::System.Data.DataColumn("item_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnitem_Id);
                this.columnurl.AllowDBNull = false;
                this.columnurl.Namespace = "";
                this.columnwebsite_text.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkRow NewlinkRow() {
                return ((linkRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new linkRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(linkRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.linkRowChanged != null)) {
                    this.linkRowChanged(this, new linkRowChangeEvent(((linkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.linkRowChanging != null)) {
                    this.linkRowChanging(this, new linkRowChangeEvent(((linkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.linkRowDeleted != null)) {
                    this.linkRowDeleted(this, new linkRowChangeEvent(((linkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.linkRowDeleting != null)) {
                    this.linkRowDeleting(this, new linkRowChangeEvent(((linkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovelinkRow(linkRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "linkDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class addressRow : global::System.Data.DataRow {
            
            private addressDataTable tableaddress;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal addressRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableaddress = ((addressDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string country {
                get {
                    try {
                        return ((string)(this[this.tableaddress.countryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'country\' in table \'address\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaddress.countryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string address_text {
                get {
                    return ((string)(this[this.tableaddress.address_textColumn]));
                }
                set {
                    this[this.tableaddress.address_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int affiliation_Id {
                get {
                    try {
                        return ((int)(this[this.tableaddress.affiliation_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'affiliation_Id\' in table \'address\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaddress.affiliation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awardManager_Id {
                get {
                    try {
                        return ((int)(this[this.tableaddress.awardManager_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'awardManager_Id\' in table \'address\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaddress.awardManager_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public affiliationRow affiliationRow {
                get {
                    return ((affiliationRow)(this.GetParentRow(this.Table.ParentRelations["affiliation_address"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["affiliation_address"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagerRow awardManagerRow {
                get {
                    return ((awardManagerRow)(this.GetParentRow(this.Table.ParentRelations["awardManager_address"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["awardManager_address"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscountryNull() {
                return this.IsNull(this.tableaddress.countryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcountryNull() {
                this[this.tableaddress.countryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaffiliation_IdNull() {
                return this.IsNull(this.tableaddress.affiliation_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaffiliation_IdNull() {
                this[this.tableaddress.affiliation_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsawardManager_IdNull() {
                return this.IsNull(this.tableaddress.awardManager_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetawardManager_IdNull() {
                this[this.tableaddress.awardManager_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class awardRow : global::System.Data.DataRow {
            
            private awardDataTable tableaward;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableaward = ((awardDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long id {
                get {
                    return ((long)(this[this.tableaward.idColumn]));
                }
                set {
                    this[this.tableaward.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fundingBodyAwardId {
                get {
                    return ((string)(this[this.tableaward.fundingBodyAwardIdColumn]));
                }
                set {
                    this[this.tableaward.fundingBodyAwardIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    return ((string)(this[this.tableaward.typeColumn]));
                }
                set {
                    this[this.tableaward.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool trusting {
                get {
                    try {
                        return ((bool)(this[this.tableaward.trustingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'trusting\' in table \'award\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaward.trustingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string collectionCode {
                get {
                    try {
                        return ((string)(this[this.tableaward.collectionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'collectionCode\' in table \'award\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaward.collectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool hidden {
                get {
                    try {
                        return ((bool)(this[this.tableaward.hiddenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hidden\' in table \'award\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaward.hiddenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableaward.nameColumn]));
                }
                set {
                    this[this.tableaward.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime startDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableaward.startDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'startDate\' in table \'award\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaward.startDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime lastAmendedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableaward.lastAmendedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lastAmendedDate\' in table \'award\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaward.lastAmendedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime endDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableaward.endDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'endDate\' in table \'award\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaward.endDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _abstract {
                get {
                    try {
                        return ((string)(this[this.tableaward._abstractColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'abstract\' in table \'award\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaward._abstractColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awards_Id {
                get {
                    try {
                        return ((int)(this[this.tableaward.awards_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'awards_Id\' in table \'award\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaward.awards_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int award_Id {
                get {
                    return ((int)(this[this.tableaward.award_IdColumn]));
                }
                set {
                    this[this.tableaward.award_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstrustingNull() {
                return this.IsNull(this.tableaward.trustingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettrustingNull() {
                this[this.tableaward.trustingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscollectionCodeNull() {
                return this.IsNull(this.tableaward.collectionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcollectionCodeNull() {
                this[this.tableaward.collectionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshiddenNull() {
                return this.IsNull(this.tableaward.hiddenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethiddenNull() {
                this[this.tableaward.hiddenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartDateNull() {
                return this.IsNull(this.tableaward.startDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartDateNull() {
                this[this.tableaward.startDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslastAmendedDateNull() {
                return this.IsNull(this.tableaward.lastAmendedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlastAmendedDateNull() {
                this[this.tableaward.lastAmendedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsendDateNull() {
                return this.IsNull(this.tableaward.endDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetendDateNull() {
                this[this.tableaward.endDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_abstractNull() {
                return this.IsNull(this.tableaward._abstractColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_abstractNull() {
                this[this.tableaward._abstractColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isawards_IdNull() {
                return this.IsNull(this.tableaward.awards_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setawards_IdNull() {
                this[this.tableaward.awards_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisionHistoryRow[] GetrevisionHistoryRows() {
                if ((this.Table.ChildRelations["award_revisionHistory"] == null)) {
                    return new revisionHistoryRow[0];
                }
                else {
                    return ((revisionHistoryRow[])(base.GetChildRows(this.Table.ChildRelations["award_revisionHistory"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public amountRow[] GetamountRows() {
                if ((this.Table.ChildRelations["award_amount"] == null)) {
                    return new amountRow[0];
                }
                else {
                    return ((amountRow[])(base.GetChildRows(this.Table.ChildRelations["award_amount"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationGroupRow[] GetclassificationGroupRows() {
                if ((this.Table.ChildRelations["award_classificationGroup"] == null)) {
                    return new classificationGroupRow[0];
                }
                else {
                    return ((classificationGroupRow[])(base.GetChildRows(this.Table.ChildRelations["award_classificationGroup"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRow[] GetkeywordsRows() {
                if ((this.Table.ChildRelations["award_keywords"] == null)) {
                    return new keywordsRow[0];
                }
                else {
                    return ((keywordsRow[])(base.GetChildRows(this.Table.ChildRelations["award_keywords"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeesRow[] GetawardeesRows() {
                if ((this.Table.ChildRelations["award_awardees"] == null)) {
                    return new awardeesRow[0];
                }
                else {
                    return ((awardeesRow[])(base.GetChildRows(this.Table.ChildRelations["award_awardees"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagersRow[] GetawardManagersRows() {
                if ((this.Table.ChildRelations["award_awardManagers"] == null)) {
                    return new awardManagersRow[0];
                }
                else {
                    return ((awardManagersRow[])(base.GetChildRows(this.Table.ChildRelations["award_awardManagers"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramsRow[] GetrelatedProgramsRows() {
                if ((this.Table.ChildRelations["award_relatedPrograms"] == null)) {
                    return new relatedProgramsRow[0];
                }
                else {
                    return ((relatedProgramsRow[])(base.GetChildRows(this.Table.ChildRelations["award_relatedPrograms"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedFundingBodiesRow[] GetrelatedFundingBodiesRows() {
                if ((this.Table.ChildRelations["award_relatedFundingBodies"] == null)) {
                    return new relatedFundingBodiesRow[0];
                }
                else {
                    return ((relatedFundingBodiesRow[])(base.GetChildRows(this.Table.ChildRelations["award_relatedFundingBodies"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedItemsRow[] GetrelatedItemsRows() {
                if ((this.Table.ChildRelations["award_relatedItems"] == null)) {
                    return new relatedItemsRow[0];
                }
                else {
                    return ((relatedItemsRow[])(base.GetChildRows(this.Table.ChildRelations["award_relatedItems"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class revisionHistoryRow : global::System.Data.DataRow {
            
            private revisionHistoryDataTable tablerevisionHistory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal revisionHistoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerevisionHistory = ((revisionHistoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    return ((string)(this[this.tablerevisionHistory.statusColumn]));
                }
                set {
                    this[this.tablerevisionHistory.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int revisionHistory_Id {
                get {
                    return ((int)(this[this.tablerevisionHistory.revisionHistory_IdColumn]));
                }
                set {
                    this[this.tablerevisionHistory.revisionHistory_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int award_Id {
                get {
                    try {
                        return ((int)(this[this.tablerevisionHistory.award_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'award_Id\' in table \'revisionHistory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerevisionHistory.award_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRow awardRow {
                get {
                    return ((awardRow)(this.GetParentRow(this.Table.ParentRelations["award_revisionHistory"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["award_revisionHistory"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaward_IdNull() {
                return this.IsNull(this.tablerevisionHistory.award_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaward_IdNull() {
                this[this.tablerevisionHistory.award_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisedDateRow[] GetrevisedDateRows() {
                if ((this.Table.ChildRelations["revisionHistory_revisedDate"] == null)) {
                    return new revisedDateRow[0];
                }
                else {
                    return ((revisedDateRow[])(base.GetChildRows(this.Table.ChildRelations["revisionHistory_revisedDate"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public createdDateRow[] GetcreatedDateRows() {
                if ((this.Table.ChildRelations["revisionHistory_createdDate"] == null)) {
                    return new createdDateRow[0];
                }
                else {
                    return ((createdDateRow[])(base.GetChildRows(this.Table.ChildRelations["revisionHistory_createdDate"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class revisedDateRow : global::System.Data.DataRow {
            
            private revisedDateDataTable tablerevisedDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal revisedDateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerevisedDate = ((revisedDateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long version {
                get {
                    return ((long)(this[this.tablerevisedDate.versionColumn]));
                }
                set {
                    this[this.tablerevisedDate.versionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime revisedDate_text {
                get {
                    return ((global::System.DateTime)(this[this.tablerevisedDate.revisedDate_textColumn]));
                }
                set {
                    this[this.tablerevisedDate.revisedDate_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int revisionHistory_Id {
                get {
                    try {
                        return ((int)(this[this.tablerevisedDate.revisionHistory_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'revisionHistory_Id\' in table \'revisedDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerevisedDate.revisionHistory_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisionHistoryRow revisionHistoryRow {
                get {
                    return ((revisionHistoryRow)(this.GetParentRow(this.Table.ParentRelations["revisionHistory_revisedDate"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["revisionHistory_revisedDate"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrevisionHistory_IdNull() {
                return this.IsNull(this.tablerevisedDate.revisionHistory_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrevisionHistory_IdNull() {
                this[this.tablerevisedDate.revisionHistory_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class createdDateRow : global::System.Data.DataRow {
            
            private createdDateDataTable tablecreatedDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal createdDateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecreatedDate = ((createdDateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long version {
                get {
                    return ((long)(this[this.tablecreatedDate.versionColumn]));
                }
                set {
                    this[this.tablecreatedDate.versionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime revisedDate_text {
                get {
                    return ((global::System.DateTime)(this[this.tablecreatedDate.revisedDate_textColumn]));
                }
                set {
                    this[this.tablecreatedDate.revisedDate_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int revisionHistory_Id {
                get {
                    try {
                        return ((int)(this[this.tablecreatedDate.revisionHistory_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'revisionHistory_Id\' in table \'createdDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecreatedDate.revisionHistory_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisionHistoryRow revisionHistoryRow {
                get {
                    return ((revisionHistoryRow)(this.GetParentRow(this.Table.ParentRelations["revisionHistory_createdDate"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["revisionHistory_createdDate"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrevisionHistory_IdNull() {
                return this.IsNull(this.tablecreatedDate.revisionHistory_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrevisionHistory_IdNull() {
                this[this.tablecreatedDate.revisionHistory_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class amountRow : global::System.Data.DataRow {
            
            private amountDataTable tableamount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal amountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableamount = ((amountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string currency {
                get {
                    try {
                        return ((string)(this[this.tableamount.currencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'currency\' in table \'amount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableamount.currencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long amount_text {
                get {
                    try {
                        return ((long)(this[this.tableamount.amount_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amount_text\' in table \'amount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableamount.amount_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int award_Id {
                get {
                    try {
                        return ((int)(this[this.tableamount.award_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'award_Id\' in table \'amount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableamount.award_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRow awardRow {
                get {
                    return ((awardRow)(this.GetParentRow(this.Table.ParentRelations["award_amount"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["award_amount"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscurrencyNull() {
                return this.IsNull(this.tableamount.currencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcurrencyNull() {
                this[this.tableamount.currencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isamount_textNull() {
                return this.IsNull(this.tableamount.amount_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setamount_textNull() {
                this[this.tableamount.amount_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaward_IdNull() {
                return this.IsNull(this.tableamount.award_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaward_IdNull() {
                this[this.tableamount.award_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class classificationGroupRow : global::System.Data.DataRow {
            
            private classificationGroupDataTable tableclassificationGroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal classificationGroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableclassificationGroup = ((classificationGroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int classificationGroup_Id {
                get {
                    return ((int)(this[this.tableclassificationGroup.classificationGroup_IdColumn]));
                }
                set {
                    this[this.tableclassificationGroup.classificationGroup_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int award_Id {
                get {
                    try {
                        return ((int)(this[this.tableclassificationGroup.award_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'award_Id\' in table \'classificationGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassificationGroup.award_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRow awardRow {
                get {
                    return ((awardRow)(this.GetParentRow(this.Table.ParentRelations["award_classificationGroup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["award_classificationGroup"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaward_IdNull() {
                return this.IsNull(this.tableclassificationGroup.award_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaward_IdNull() {
                this[this.tableclassificationGroup.award_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationsRow[] GetclassificationsRows() {
                if ((this.Table.ChildRelations["classificationGroup_classifications"] == null)) {
                    return new classificationsRow[0];
                }
                else {
                    return ((classificationsRow[])(base.GetChildRows(this.Table.ChildRelations["classificationGroup_classifications"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class classificationsRow : global::System.Data.DataRow {
            
            private classificationsDataTable tableclassifications;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal classificationsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableclassifications = ((classificationsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    return ((string)(this[this.tableclassifications.typeColumn]));
                }
                set {
                    this[this.tableclassifications.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int classifications_Id {
                get {
                    return ((int)(this[this.tableclassifications.classifications_IdColumn]));
                }
                set {
                    this[this.tableclassifications.classifications_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int classificationGroup_Id {
                get {
                    try {
                        return ((int)(this[this.tableclassifications.classificationGroup_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'classificationGroup_Id\' in table \'classifications\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableclassifications.classificationGroup_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationGroupRow classificationGroupRow {
                get {
                    return ((classificationGroupRow)(this.GetParentRow(this.Table.ParentRelations["classificationGroup_classifications"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["classificationGroup_classifications"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclassificationGroup_IdNull() {
                return this.IsNull(this.tableclassifications.classificationGroup_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclassificationGroup_IdNull() {
                this[this.tableclassifications.classificationGroup_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationRow[] GetclassificationRows() {
                if ((this.Table.ChildRelations["classifications_classification"] == null)) {
                    return new classificationRow[0];
                }
                else {
                    return ((classificationRow[])(base.GetChildRows(this.Table.ChildRelations["classifications_classification"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class classificationRow : global::System.Data.DataRow {
            
            private classificationDataTable tableclassification;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal classificationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableclassification = ((classificationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long frequency {
                get {
                    return ((long)(this[this.tableclassification.frequencyColumn]));
                }
                set {
                    this[this.tableclassification.frequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string code {
                get {
                    try {
                        return ((string)(this[this.tableclassification.codeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'code\' in table \'classification\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassification.codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string classification_text {
                get {
                    return ((string)(this[this.tableclassification.classification_textColumn]));
                }
                set {
                    this[this.tableclassification.classification_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int classifications_Id {
                get {
                    try {
                        return ((int)(this[this.tableclassification.classifications_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'classifications_Id\' in table \'classification\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassification.classifications_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationsRow classificationsRow {
                get {
                    return ((classificationsRow)(this.GetParentRow(this.Table.ParentRelations["classifications_classification"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["classifications_classification"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscodeNull() {
                return this.IsNull(this.tableclassification.codeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcodeNull() {
                this[this.tableclassification.codeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isclassifications_IdNull() {
                return this.IsNull(this.tableclassification.classifications_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setclassifications_IdNull() {
                this[this.tableclassification.classifications_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class keywordsRow : global::System.Data.DataRow {
            
            private keywordsDataTable tablekeywords;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal keywordsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablekeywords = ((keywordsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int keywords_Id {
                get {
                    return ((int)(this[this.tablekeywords.keywords_IdColumn]));
                }
                set {
                    this[this.tablekeywords.keywords_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int award_Id {
                get {
                    try {
                        return ((int)(this[this.tablekeywords.award_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'award_Id\' in table \'keywords\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablekeywords.award_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRow awardRow {
                get {
                    return ((awardRow)(this.GetParentRow(this.Table.ParentRelations["award_keywords"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["award_keywords"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaward_IdNull() {
                return this.IsNull(this.tablekeywords.award_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaward_IdNull() {
                this[this.tablekeywords.award_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordRow[] GetkeywordRows() {
                if ((this.Table.ChildRelations["keywords_keyword"] == null)) {
                    return new keywordRow[0];
                }
                else {
                    return ((keywordRow[])(base.GetChildRows(this.Table.ChildRelations["keywords_keyword"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class keywordRow : global::System.Data.DataRow {
            
            private keywordDataTable tablekeyword;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal keywordRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablekeyword = ((keywordDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string keyword_Column {
                get {
                    return ((string)(this[this.tablekeyword.keyword_ColumnColumn]));
                }
                set {
                    this[this.tablekeyword.keyword_ColumnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int keywords_Id {
                get {
                    try {
                        return ((int)(this[this.tablekeyword.keywords_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'keywords_Id\' in table \'keyword\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablekeyword.keywords_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRow keywordsRow {
                get {
                    return ((keywordsRow)(this.GetParentRow(this.Table.ParentRelations["keywords_keyword"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["keywords_keyword"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iskeywords_IdNull() {
                return this.IsNull(this.tablekeyword.keywords_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setkeywords_IdNull() {
                this[this.tablekeyword.keywords_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class awardeesRow : global::System.Data.DataRow {
            
            private awardeesDataTable tableawardees;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardeesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableawardees = ((awardeesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awardees_Id {
                get {
                    return ((int)(this[this.tableawardees.awardees_IdColumn]));
                }
                set {
                    this[this.tableawardees.awardees_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int award_Id {
                get {
                    try {
                        return ((int)(this[this.tableawardees.award_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'award_Id\' in table \'awardees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardees.award_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRow awardRow {
                get {
                    return ((awardRow)(this.GetParentRow(this.Table.ParentRelations["award_awardees"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["award_awardees"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaward_IdNull() {
                return this.IsNull(this.tableawardees.award_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaward_IdNull() {
                this[this.tableawardees.award_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeRow[] GetawardeeRows() {
                if ((this.Table.ChildRelations["awardees_awardee"] == null)) {
                    return new awardeeRow[0];
                }
                else {
                    return ((awardeeRow[])(base.GetChildRows(this.Table.ChildRelations["awardees_awardee"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class awardeeRow : global::System.Data.DataRow {
            
            private awardeeDataTable tableawardee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardeeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableawardee = ((awardeeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    return ((string)(this[this.tableawardee.typeColumn]));
                }
                set {
                    this[this.tableawardee.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ScopusAuthorID {
                get {
                    try {
                        return ((long)(this[this.tableawardee.ScopusAuthorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScopusAuthorID\' in table \'awardee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardee.ScopusAuthorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awardee_Id {
                get {
                    return ((int)(this[this.tableawardee.awardee_IdColumn]));
                }
                set {
                    this[this.tableawardee.awardee_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awardees_Id {
                get {
                    try {
                        return ((int)(this[this.tableawardee.awardees_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'awardees_Id\' in table \'awardee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardee.awardees_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeesRow awardeesRow {
                get {
                    return ((awardeesRow)(this.GetParentRow(this.Table.ParentRelations["awardees_awardee"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["awardees_awardee"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScopusAuthorIDNull() {
                return this.IsNull(this.tableawardee.ScopusAuthorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScopusAuthorIDNull() {
                this[this.tableawardee.ScopusAuthorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isawardees_IdNull() {
                return this.IsNull(this.tableawardee.awardees_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setawardees_IdNull() {
                this[this.tableawardee.awardees_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeNameRow[] GetawardeeNameRows() {
                if ((this.Table.ChildRelations["awardee_awardeeName"] == null)) {
                    return new awardeeNameRow[0];
                }
                else {
                    return ((awardeeNameRow[])(base.GetChildRows(this.Table.ChildRelations["awardee_awardeeName"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeInstitutionRow[] GetawardeeInstitutionRows() {
                if ((this.Table.ChildRelations["awardee_awardeeInstitution"] == null)) {
                    return new awardeeInstitutionRow[0];
                }
                else {
                    return ((awardeeInstitutionRow[])(base.GetChildRows(this.Table.ChildRelations["awardee_awardeeInstitution"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class awardeeNameRow : global::System.Data.DataRow {
            
            private awardeeNameDataTable tableawardeeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardeeNameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableawardeeName = ((awardeeNameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string indexedName {
                get {
                    return ((string)(this[this.tableawardeeName.indexedNameColumn]));
                }
                set {
                    this[this.tableawardeeName.indexedNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string givenName {
                get {
                    try {
                        return ((string)(this[this.tableawardeeName.givenNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'givenName\' in table \'awardeeName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardeeName.givenNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string initials {
                get {
                    try {
                        return ((string)(this[this.tableawardeeName.initialsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'initials\' in table \'awardeeName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardeeName.initialsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string surname {
                get {
                    try {
                        return ((string)(this[this.tableawardeeName.surnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'surname\' in table \'awardeeName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardeeName.surnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awardee_Id {
                get {
                    try {
                        return ((int)(this[this.tableawardeeName.awardee_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'awardee_Id\' in table \'awardeeName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardeeName.awardee_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeRow awardeeRow {
                get {
                    return ((awardeeRow)(this.GetParentRow(this.Table.ParentRelations["awardee_awardeeName"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["awardee_awardeeName"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgivenNameNull() {
                return this.IsNull(this.tableawardeeName.givenNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgivenNameNull() {
                this[this.tableawardeeName.givenNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinitialsNull() {
                return this.IsNull(this.tableawardeeName.initialsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinitialsNull() {
                this[this.tableawardeeName.initialsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssurnameNull() {
                return this.IsNull(this.tableawardeeName.surnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsurnameNull() {
                this[this.tableawardeeName.surnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isawardee_IdNull() {
                return this.IsNull(this.tableawardeeName.awardee_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setawardee_IdNull() {
                this[this.tableawardeeName.awardee_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class awardeeInstitutionRow : global::System.Data.DataRow {
            
            private awardeeInstitutionDataTable tableawardeeInstitution;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardeeInstitutionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableawardeeInstitution = ((awardeeInstitutionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awardeeInstitution_Id {
                get {
                    return ((int)(this[this.tableawardeeInstitution.awardeeInstitution_IdColumn]));
                }
                set {
                    this[this.tableawardeeInstitution.awardeeInstitution_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awardee_Id {
                get {
                    try {
                        return ((int)(this[this.tableawardeeInstitution.awardee_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'awardee_Id\' in table \'awardeeInstitution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardeeInstitution.awardee_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeRow awardeeRow {
                get {
                    return ((awardeeRow)(this.GetParentRow(this.Table.ParentRelations["awardee_awardeeInstitution"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["awardee_awardeeInstitution"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isawardee_IdNull() {
                return this.IsNull(this.tableawardeeInstitution.awardee_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setawardee_IdNull() {
                this[this.tableawardeeInstitution.awardee_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public affiliationRow[] GetaffiliationRows() {
                if ((this.Table.ChildRelations["awardeeInstitution_affiliation"] == null)) {
                    return new affiliationRow[0];
                }
                else {
                    return ((affiliationRow[])(base.GetChildRows(this.Table.ChildRelations["awardeeInstitution_affiliation"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class affiliationRow : global::System.Data.DataRow {
            
            private affiliationDataTable tableaffiliation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal affiliationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableaffiliation = ((affiliationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ScopusInstitutionID {
                get {
                    try {
                        return ((long)(this[this.tableaffiliation.ScopusInstitutionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScopusInstitutionID\' in table \'affiliation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaffiliation.ScopusInstitutionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string org {
                get {
                    return ((string)(this[this.tableaffiliation.orgColumn]));
                }
                set {
                    this[this.tableaffiliation.orgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dept {
                get {
                    try {
                        return ((string)(this[this.tableaffiliation.deptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dept\' in table \'affiliation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaffiliation.deptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime startDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableaffiliation.startDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'startDate\' in table \'affiliation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaffiliation.startDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime endDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableaffiliation.endDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'endDate\' in table \'affiliation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaffiliation.endDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableaffiliation.emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'email\' in table \'affiliation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaffiliation.emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string webpage {
                get {
                    try {
                        return ((string)(this[this.tableaffiliation.webpageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'webpage\' in table \'affiliation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaffiliation.webpageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int affiliation_Id {
                get {
                    return ((int)(this[this.tableaffiliation.affiliation_IdColumn]));
                }
                set {
                    this[this.tableaffiliation.affiliation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awardeeInstitution_Id {
                get {
                    try {
                        return ((int)(this[this.tableaffiliation.awardeeInstitution_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'awardeeInstitution_Id\' in table \'affiliation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaffiliation.awardeeInstitution_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeInstitutionRow awardeeInstitutionRow {
                get {
                    return ((awardeeInstitutionRow)(this.GetParentRow(this.Table.ParentRelations["awardeeInstitution_affiliation"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["awardeeInstitution_affiliation"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScopusInstitutionIDNull() {
                return this.IsNull(this.tableaffiliation.ScopusInstitutionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScopusInstitutionIDNull() {
                this[this.tableaffiliation.ScopusInstitutionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeptNull() {
                return this.IsNull(this.tableaffiliation.deptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeptNull() {
                this[this.tableaffiliation.deptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartDateNull() {
                return this.IsNull(this.tableaffiliation.startDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartDateNull() {
                this[this.tableaffiliation.startDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsendDateNull() {
                return this.IsNull(this.tableaffiliation.endDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetendDateNull() {
                this[this.tableaffiliation.endDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailNull() {
                return this.IsNull(this.tableaffiliation.emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailNull() {
                this[this.tableaffiliation.emailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IswebpageNull() {
                return this.IsNull(this.tableaffiliation.webpageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetwebpageNull() {
                this[this.tableaffiliation.webpageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsawardeeInstitution_IdNull() {
                return this.IsNull(this.tableaffiliation.awardeeInstitution_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetawardeeInstitution_IdNull() {
                this[this.tableaffiliation.awardeeInstitution_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressRow[] GetaddressRows() {
                if ((this.Table.ChildRelations["affiliation_address"] == null)) {
                    return new addressRow[0];
                }
                else {
                    return ((addressRow[])(base.GetChildRows(this.Table.ChildRelations["affiliation_address"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telephoneRow[] GettelephoneRows() {
                if ((this.Table.ChildRelations["affiliation_telephone"] == null)) {
                    return new telephoneRow[0];
                }
                else {
                    return ((telephoneRow[])(base.GetChildRows(this.Table.ChildRelations["affiliation_telephone"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public faxRow[] GetfaxRows() {
                if ((this.Table.ChildRelations["affiliation_fax"] == null)) {
                    return new faxRow[0];
                }
                else {
                    return ((faxRow[])(base.GetChildRows(this.Table.ChildRelations["affiliation_fax"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class telephoneRow : global::System.Data.DataRow {
            
            private telephoneDataTable tabletelephone;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal telephoneRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletelephone = ((telephoneDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string telephone_Column {
                get {
                    try {
                        return ((string)(this[this.tabletelephone.telephone_ColumnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'telephone_Column\' in table \'telephone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletelephone.telephone_ColumnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int affiliation_Id {
                get {
                    try {
                        return ((int)(this[this.tabletelephone.affiliation_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'affiliation_Id\' in table \'telephone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletelephone.affiliation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public affiliationRow affiliationRow {
                get {
                    return ((affiliationRow)(this.GetParentRow(this.Table.ParentRelations["affiliation_telephone"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["affiliation_telephone"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istelephone_ColumnNull() {
                return this.IsNull(this.tabletelephone.telephone_ColumnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settelephone_ColumnNull() {
                this[this.tabletelephone.telephone_ColumnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaffiliation_IdNull() {
                return this.IsNull(this.tabletelephone.affiliation_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaffiliation_IdNull() {
                this[this.tabletelephone.affiliation_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class faxRow : global::System.Data.DataRow {
            
            private faxDataTable tablefax;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal faxRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablefax = ((faxDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fax_Column {
                get {
                    try {
                        return ((string)(this[this.tablefax.fax_ColumnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fax_Column\' in table \'fax\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefax.fax_ColumnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int affiliation_Id {
                get {
                    try {
                        return ((int)(this[this.tablefax.affiliation_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'affiliation_Id\' in table \'fax\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefax.affiliation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public affiliationRow affiliationRow {
                get {
                    return ((affiliationRow)(this.GetParentRow(this.Table.ParentRelations["affiliation_fax"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["affiliation_fax"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfax_ColumnNull() {
                return this.IsNull(this.tablefax.fax_ColumnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfax_ColumnNull() {
                this[this.tablefax.fax_ColumnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaffiliation_IdNull() {
                return this.IsNull(this.tablefax.affiliation_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaffiliation_IdNull() {
                this[this.tablefax.affiliation_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class awardManagersRow : global::System.Data.DataRow {
            
            private awardManagersDataTable tableawardManagers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardManagersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableawardManagers = ((awardManagersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awardManagers_Id {
                get {
                    return ((int)(this[this.tableawardManagers.awardManagers_IdColumn]));
                }
                set {
                    this[this.tableawardManagers.awardManagers_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int award_Id {
                get {
                    try {
                        return ((int)(this[this.tableawardManagers.award_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'award_Id\' in table \'awardManagers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardManagers.award_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRow awardRow {
                get {
                    return ((awardRow)(this.GetParentRow(this.Table.ParentRelations["award_awardManagers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["award_awardManagers"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaward_IdNull() {
                return this.IsNull(this.tableawardManagers.award_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaward_IdNull() {
                this[this.tableawardManagers.award_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagerRow[] GetawardManagerRows() {
                if ((this.Table.ChildRelations["awardManagers_awardManager"] == null)) {
                    return new awardManagerRow[0];
                }
                else {
                    return ((awardManagerRow[])(base.GetChildRows(this.Table.ChildRelations["awardManagers_awardManager"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class awardManagerRow : global::System.Data.DataRow {
            
            private awardManagerDataTable tableawardManager;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal awardManagerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableawardManager = ((awardManagerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableawardManager.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'awardManager\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardManager.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    try {
                        return ((string)(this[this.tableawardManager.titleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'title\' in table \'awardManager\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardManager.titleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string telephone {
                get {
                    try {
                        return ((string)(this[this.tableawardManager.telephoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'telephone\' in table \'awardManager\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardManager.telephoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fax {
                get {
                    try {
                        return ((string)(this[this.tableawardManager.faxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fax\' in table \'awardManager\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardManager.faxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableawardManager.emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'email\' in table \'awardManager\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardManager.emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awardManager_Id {
                get {
                    return ((int)(this[this.tableawardManager.awardManager_IdColumn]));
                }
                set {
                    this[this.tableawardManager.awardManager_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awardManagers_Id {
                get {
                    try {
                        return ((int)(this[this.tableawardManager.awardManagers_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'awardManagers_Id\' in table \'awardManager\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableawardManager.awardManagers_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagersRow awardManagersRow {
                get {
                    return ((awardManagersRow)(this.GetParentRow(this.Table.ParentRelations["awardManagers_awardManager"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["awardManagers_awardManager"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tableawardManager.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tableawardManager.typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstitleNull() {
                return this.IsNull(this.tableawardManager.titleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettitleNull() {
                this[this.tableawardManager.titleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstelephoneNull() {
                return this.IsNull(this.tableawardManager.telephoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettelephoneNull() {
                this[this.tableawardManager.telephoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfaxNull() {
                return this.IsNull(this.tableawardManager.faxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfaxNull() {
                this[this.tableawardManager.faxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailNull() {
                return this.IsNull(this.tableawardManager.emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailNull() {
                this[this.tableawardManager.emailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsawardManagers_IdNull() {
                return this.IsNull(this.tableawardManager.awardManagers_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetawardManagers_IdNull() {
                this[this.tableawardManager.awardManagers_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactNameRow[] GetcontactNameRows() {
                if ((this.Table.ChildRelations["awardManager_contactName"] == null)) {
                    return new contactNameRow[0];
                }
                else {
                    return ((contactNameRow[])(base.GetChildRows(this.Table.ChildRelations["awardManager_contactName"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public websiteRow[] GetwebsiteRows() {
                if ((this.Table.ChildRelations["awardManager_website"] == null)) {
                    return new websiteRow[0];
                }
                else {
                    return ((websiteRow[])(base.GetChildRows(this.Table.ChildRelations["awardManager_website"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressRow[] GetaddressRows() {
                if ((this.Table.ChildRelations["awardManager_address"] == null)) {
                    return new addressRow[0];
                }
                else {
                    return ((addressRow[])(base.GetChildRows(this.Table.ChildRelations["awardManager_address"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class contactNameRow : global::System.Data.DataRow {
            
            private contactNameDataTable tablecontactName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contactNameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecontactName = ((contactNameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string prefix {
                get {
                    try {
                        return ((string)(this[this.tablecontactName.prefixColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prefix\' in table \'contactName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontactName.prefixColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string givenName {
                get {
                    return ((string)(this[this.tablecontactName.givenNameColumn]));
                }
                set {
                    this[this.tablecontactName.givenNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string middleName {
                get {
                    try {
                        return ((string)(this[this.tablecontactName.middleNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'middleName\' in table \'contactName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontactName.middleNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string surname {
                get {
                    return ((string)(this[this.tablecontactName.surnameColumn]));
                }
                set {
                    this[this.tablecontactName.surnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string suffix {
                get {
                    try {
                        return ((string)(this[this.tablecontactName.suffixColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'suffix\' in table \'contactName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontactName.suffixColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awardManager_Id {
                get {
                    try {
                        return ((int)(this[this.tablecontactName.awardManager_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'awardManager_Id\' in table \'contactName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontactName.awardManager_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagerRow awardManagerRow {
                get {
                    return ((awardManagerRow)(this.GetParentRow(this.Table.ParentRelations["awardManager_contactName"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["awardManager_contactName"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprefixNull() {
                return this.IsNull(this.tablecontactName.prefixColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprefixNull() {
                this[this.tablecontactName.prefixColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmiddleNameNull() {
                return this.IsNull(this.tablecontactName.middleNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmiddleNameNull() {
                this[this.tablecontactName.middleNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssuffixNull() {
                return this.IsNull(this.tablecontactName.suffixColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsuffixNull() {
                this[this.tablecontactName.suffixColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsawardManager_IdNull() {
                return this.IsNull(this.tablecontactName.awardManager_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetawardManager_IdNull() {
                this[this.tablecontactName.awardManager_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class websiteRow : global::System.Data.DataRow {
            
            private websiteDataTable tablewebsite;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal websiteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablewebsite = ((websiteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string url {
                get {
                    return ((string)(this[this.tablewebsite.urlColumn]));
                }
                set {
                    this[this.tablewebsite.urlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string website_text {
                get {
                    try {
                        return ((string)(this[this.tablewebsite.website_textColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'website_text\' in table \'website\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablewebsite.website_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int awardManager_Id {
                get {
                    try {
                        return ((int)(this[this.tablewebsite.awardManager_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'awardManager_Id\' in table \'website\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablewebsite.awardManager_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagerRow awardManagerRow {
                get {
                    return ((awardManagerRow)(this.GetParentRow(this.Table.ParentRelations["awardManager_website"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["awardManager_website"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iswebsite_textNull() {
                return this.IsNull(this.tablewebsite.website_textColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setwebsite_textNull() {
                this[this.tablewebsite.website_textColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsawardManager_IdNull() {
                return this.IsNull(this.tablewebsite.awardManager_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetawardManager_IdNull() {
                this[this.tablewebsite.awardManager_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class relatedProgramsRow : global::System.Data.DataRow {
            
            private relatedProgramsDataTable tablerelatedPrograms;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal relatedProgramsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerelatedPrograms = ((relatedProgramsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hierarchy {
                get {
                    try {
                        return ((string)(this[this.tablerelatedPrograms.hierarchyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hierarchy\' in table \'relatedPrograms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerelatedPrograms.hierarchyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int relatedPrograms_Id {
                get {
                    return ((int)(this[this.tablerelatedPrograms.relatedPrograms_IdColumn]));
                }
                set {
                    this[this.tablerelatedPrograms.relatedPrograms_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int award_Id {
                get {
                    try {
                        return ((int)(this[this.tablerelatedPrograms.award_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'award_Id\' in table \'relatedPrograms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerelatedPrograms.award_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRow awardRow {
                get {
                    return ((awardRow)(this.GetParentRow(this.Table.ParentRelations["award_relatedPrograms"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["award_relatedPrograms"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshierarchyNull() {
                return this.IsNull(this.tablerelatedPrograms.hierarchyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethierarchyNull() {
                this[this.tablerelatedPrograms.hierarchyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaward_IdNull() {
                return this.IsNull(this.tablerelatedPrograms.award_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaward_IdNull() {
                this[this.tablerelatedPrograms.award_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramRow[] GetrelatedProgramRows() {
                if ((this.Table.ChildRelations["relatedPrograms_relatedProgram"] == null)) {
                    return new relatedProgramRow[0];
                }
                else {
                    return ((relatedProgramRow[])(base.GetChildRows(this.Table.ChildRelations["relatedPrograms_relatedProgram"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class relatedProgramRow : global::System.Data.DataRow {
            
            private relatedProgramDataTable tablerelatedProgram;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal relatedProgramRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerelatedProgram = ((relatedProgramDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long id {
                get {
                    return ((long)(this[this.tablerelatedProgram.idColumn]));
                }
                set {
                    this[this.tablerelatedProgram.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string relType {
                get {
                    return ((string)(this[this.tablerelatedProgram.relTypeColumn]));
                }
                set {
                    this[this.tablerelatedProgram.relTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string relatedProgram_text {
                get {
                    return ((string)(this[this.tablerelatedProgram.relatedProgram_textColumn]));
                }
                set {
                    this[this.tablerelatedProgram.relatedProgram_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int relatedPrograms_Id {
                get {
                    try {
                        return ((int)(this[this.tablerelatedProgram.relatedPrograms_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'relatedPrograms_Id\' in table \'relatedProgram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerelatedProgram.relatedPrograms_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramsRow relatedProgramsRow {
                get {
                    return ((relatedProgramsRow)(this.GetParentRow(this.Table.ParentRelations["relatedPrograms_relatedProgram"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["relatedPrograms_relatedProgram"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrelatedPrograms_IdNull() {
                return this.IsNull(this.tablerelatedProgram.relatedPrograms_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrelatedPrograms_IdNull() {
                this[this.tablerelatedProgram.relatedPrograms_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class relatedFundingBodiesRow : global::System.Data.DataRow {
            
            private relatedFundingBodiesDataTable tablerelatedFundingBodies;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal relatedFundingBodiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerelatedFundingBodies = ((relatedFundingBodiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hierarchy {
                get {
                    try {
                        return ((string)(this[this.tablerelatedFundingBodies.hierarchyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hierarchy\' in table \'relatedFundingBodies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerelatedFundingBodies.hierarchyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int relatedFundingBodies_Id {
                get {
                    return ((int)(this[this.tablerelatedFundingBodies.relatedFundingBodies_IdColumn]));
                }
                set {
                    this[this.tablerelatedFundingBodies.relatedFundingBodies_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int award_Id {
                get {
                    try {
                        return ((int)(this[this.tablerelatedFundingBodies.award_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'award_Id\' in table \'relatedFundingBodies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerelatedFundingBodies.award_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRow awardRow {
                get {
                    return ((awardRow)(this.GetParentRow(this.Table.ParentRelations["award_relatedFundingBodies"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["award_relatedFundingBodies"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshierarchyNull() {
                return this.IsNull(this.tablerelatedFundingBodies.hierarchyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethierarchyNull() {
                this[this.tablerelatedFundingBodies.hierarchyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaward_IdNull() {
                return this.IsNull(this.tablerelatedFundingBodies.award_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaward_IdNull() {
                this[this.tablerelatedFundingBodies.award_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public orgRow[] GetorgRows() {
                if ((this.Table.ChildRelations["relatedFundingBodies_org"] == null)) {
                    return new orgRow[0];
                }
                else {
                    return ((orgRow[])(base.GetChildRows(this.Table.ChildRelations["relatedFundingBodies_org"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class orgRow : global::System.Data.DataRow {
            
            private orgDataTable tableorg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal orgRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableorg = ((orgDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long orgDbId {
                get {
                    return ((long)(this[this.tableorg.orgDbIdColumn]));
                }
                set {
                    this[this.tableorg.orgDbIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string relType {
                get {
                    return ((string)(this[this.tableorg.relTypeColumn]));
                }
                set {
                    this[this.tableorg.relTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string org_text {
                get {
                    return ((string)(this[this.tableorg.org_textColumn]));
                }
                set {
                    this[this.tableorg.org_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int relatedFundingBodies_Id {
                get {
                    try {
                        return ((int)(this[this.tableorg.relatedFundingBodies_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'relatedFundingBodies_Id\' in table \'org\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableorg.relatedFundingBodies_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedFundingBodiesRow relatedFundingBodiesRow {
                get {
                    return ((relatedFundingBodiesRow)(this.GetParentRow(this.Table.ParentRelations["relatedFundingBodies_org"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["relatedFundingBodies_org"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrelatedFundingBodies_IdNull() {
                return this.IsNull(this.tableorg.relatedFundingBodies_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrelatedFundingBodies_IdNull() {
                this[this.tableorg.relatedFundingBodies_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class relatedItemsRow : global::System.Data.DataRow {
            
            private relatedItemsDataTable tablerelatedItems;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal relatedItemsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerelatedItems = ((relatedItemsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int relatedItems_Id {
                get {
                    return ((int)(this[this.tablerelatedItems.relatedItems_IdColumn]));
                }
                set {
                    this[this.tablerelatedItems.relatedItems_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int award_Id {
                get {
                    try {
                        return ((int)(this[this.tablerelatedItems.award_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'award_Id\' in table \'relatedItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerelatedItems.award_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRow awardRow {
                get {
                    return ((awardRow)(this.GetParentRow(this.Table.ParentRelations["award_relatedItems"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["award_relatedItems"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaward_IdNull() {
                return this.IsNull(this.tablerelatedItems.award_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaward_IdNull() {
                this[this.tablerelatedItems.award_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow[] GetitemRows() {
                if ((this.Table.ChildRelations["relatedItems_item"] == null)) {
                    return new itemRow[0];
                }
                else {
                    return ((itemRow[])(base.GetChildRows(this.Table.ChildRelations["relatedItems_item"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class itemRow : global::System.Data.DataRow {
            
            private itemDataTable tableitem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal itemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableitem = ((itemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string relType {
                get {
                    try {
                        return ((string)(this[this.tableitem.relTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'relType\' in table \'item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem.relTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableitem.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int item_Id {
                get {
                    return ((int)(this[this.tableitem.item_IdColumn]));
                }
                set {
                    this[this.tableitem.item_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int relatedItems_Id {
                get {
                    try {
                        return ((int)(this[this.tableitem.relatedItems_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'relatedItems_Id\' in table \'item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem.relatedItems_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedItemsRow relatedItemsRow {
                get {
                    return ((relatedItemsRow)(this.GetParentRow(this.Table.ParentRelations["relatedItems_item"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["relatedItems_item"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrelTypeNull() {
                return this.IsNull(this.tableitem.relTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrelTypeNull() {
                this[this.tableitem.relTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableitem.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableitem.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrelatedItems_IdNull() {
                return this.IsNull(this.tableitem.relatedItems_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrelatedItems_IdNull() {
                this[this.tableitem.relatedItems_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkRow[] GetlinkRows() {
                if ((this.Table.ChildRelations["item_link"] == null)) {
                    return new linkRow[0];
                }
                else {
                    return ((linkRow[])(base.GetChildRows(this.Table.ChildRelations["item_link"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class linkRow : global::System.Data.DataRow {
            
            private linkDataTable tablelink;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal linkRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablelink = ((linkDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string url {
                get {
                    return ((string)(this[this.tablelink.urlColumn]));
                }
                set {
                    this[this.tablelink.urlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string website_text {
                get {
                    return ((string)(this[this.tablelink.website_textColumn]));
                }
                set {
                    this[this.tablelink.website_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int item_Id {
                get {
                    try {
                        return ((int)(this[this.tablelink.item_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'item_Id\' in table \'link\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablelink.item_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow itemRow {
                get {
                    return ((itemRow)(this.GetParentRow(this.Table.ParentRelations["item_link"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["item_link"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isitem_IdNull() {
                return this.IsNull(this.tablelink.item_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setitem_IdNull() {
                this[this.tablelink.item_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class addressRowChangeEvent : global::System.EventArgs {
            
            private addressRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressRowChangeEvent(addressRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class awardRowChangeEvent : global::System.EventArgs {
            
            private awardRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRowChangeEvent(awardRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class revisionHistoryRowChangeEvent : global::System.EventArgs {
            
            private revisionHistoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisionHistoryRowChangeEvent(revisionHistoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisionHistoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class revisedDateRowChangeEvent : global::System.EventArgs {
            
            private revisedDateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisedDateRowChangeEvent(revisedDateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public revisedDateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class createdDateRowChangeEvent : global::System.EventArgs {
            
            private createdDateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public createdDateRowChangeEvent(createdDateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public createdDateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class amountRowChangeEvent : global::System.EventArgs {
            
            private amountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public amountRowChangeEvent(amountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public amountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class classificationGroupRowChangeEvent : global::System.EventArgs {
            
            private classificationGroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationGroupRowChangeEvent(classificationGroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class classificationsRowChangeEvent : global::System.EventArgs {
            
            private classificationsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationsRowChangeEvent(classificationsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class classificationRowChangeEvent : global::System.EventArgs {
            
            private classificationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationRowChangeEvent(classificationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public classificationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class keywordsRowChangeEvent : global::System.EventArgs {
            
            private keywordsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRowChangeEvent(keywordsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class keywordRowChangeEvent : global::System.EventArgs {
            
            private keywordRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordRowChangeEvent(keywordRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public keywordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class awardeesRowChangeEvent : global::System.EventArgs {
            
            private awardeesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeesRowChangeEvent(awardeesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class awardeeRowChangeEvent : global::System.EventArgs {
            
            private awardeeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeRowChangeEvent(awardeeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class awardeeNameRowChangeEvent : global::System.EventArgs {
            
            private awardeeNameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeNameRowChangeEvent(awardeeNameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class awardeeInstitutionRowChangeEvent : global::System.EventArgs {
            
            private awardeeInstitutionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeInstitutionRowChangeEvent(awardeeInstitutionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardeeInstitutionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class affiliationRowChangeEvent : global::System.EventArgs {
            
            private affiliationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public affiliationRowChangeEvent(affiliationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public affiliationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class telephoneRowChangeEvent : global::System.EventArgs {
            
            private telephoneRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telephoneRowChangeEvent(telephoneRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public telephoneRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class faxRowChangeEvent : global::System.EventArgs {
            
            private faxRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public faxRowChangeEvent(faxRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public faxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class awardManagersRowChangeEvent : global::System.EventArgs {
            
            private awardManagersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagersRowChangeEvent(awardManagersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class awardManagerRowChangeEvent : global::System.EventArgs {
            
            private awardManagerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagerRowChangeEvent(awardManagerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public awardManagerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class contactNameRowChangeEvent : global::System.EventArgs {
            
            private contactNameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactNameRowChangeEvent(contactNameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contactNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class websiteRowChangeEvent : global::System.EventArgs {
            
            private websiteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public websiteRowChangeEvent(websiteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public websiteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class relatedProgramsRowChangeEvent : global::System.EventArgs {
            
            private relatedProgramsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramsRowChangeEvent(relatedProgramsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class relatedProgramRowChangeEvent : global::System.EventArgs {
            
            private relatedProgramRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramRowChangeEvent(relatedProgramRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedProgramRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class relatedFundingBodiesRowChangeEvent : global::System.EventArgs {
            
            private relatedFundingBodiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedFundingBodiesRowChangeEvent(relatedFundingBodiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedFundingBodiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class orgRowChangeEvent : global::System.EventArgs {
            
            private orgRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public orgRowChangeEvent(orgRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public orgRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class relatedItemsRowChangeEvent : global::System.EventArgs {
            
            private relatedItemsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedItemsRowChangeEvent(relatedItemsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relatedItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class itemRowChangeEvent : global::System.EventArgs {
            
            private itemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRowChangeEvent(itemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class linkRowChangeEvent : global::System.EventArgs {
            
            private linkRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkRowChangeEvent(linkRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591